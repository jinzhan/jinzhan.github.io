<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jinzhan - A developer and designer.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jinzhan.github.io/"/>
  <updated>2018-11-25T16:26:13.758Z</updated>
  <id>http://jinzhan.github.io/</id>
  
  <author>
    <name>Jinzhan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>格鲁夫给经理人的第一课</title>
    <link href="http://jinzhan.github.io/08/22/2018/%E6%A0%BC%E9%B2%81%E5%A4%AB%E7%BB%99%E7%BB%8F%E7%90%86%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E8%AF%BE/"/>
    <id>http://jinzhan.github.io/08/22/2018/格鲁夫给经理人的第一课/</id>
    <published>2018-08-22T14:31:28.000Z</published>
    <updated>2018-11-25T16:26:13.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>安迪·格鲁夫，英特尔公司的创始人兼 CEO。在他的带领下，英特尔公司多次成功转型，从一家濒临倒闭的存储器公司，发展成为全球大型半导体企业及计算机 CPU 制造商。</p><p>作为一位拥有多项半导体技术专利的科学家，格鲁夫的管理理念带有深厚的技术色彩。除了活跃在企业管理的第一线，他还担任了哈佛大学的荣誉教授，长期在斯坦福大学商学院主讲策略管理课程。1997年，格鲁夫被《时代》杂志评为“年度风云人物”。     </p><h2 id="关于本书"><a href="#关于本书" class="headerlink" title="关于本书"></a>关于本书</h2><p>本书是格鲁夫对英特尔公司数十年的管理实战经验的总结，也是一位工程技术人才管理经验的实例教案。通过格鲁夫的分享，我们看到了中层管理者作为一个组织的中流砥柱，是如何通过产出导向、团队意识、绩效考核等不同的管理技巧，以有效的投入获得最大的产出。此书受到了《纽约时报》、《华尔街日报》等媒体的强力推荐。</p><h2 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h2><p>中层管理者以有效的投入提高产能、获得高产出的三个关键词：</p><p>第一，产出导向。中层管理者的一切管理活动，都要围绕整个团队的产出最大化来进行。为此，这些领导者需要找出那些对事项起决定作用的“限制步骤”，并且不断提高自己和整个组织的杠杆率。</p><p>第二，团队意识。为了让整个组织能保持持续的创造力和战斗力，通过开会可以让上司和下属建立起共同的信息基础，以及近似的处事方式，形成团队意识，提高工作效率。</p><p>第三，绩效考核。好的绩效考核是管理杠杆率最高的行为，中层管理者应该为员工制定竞赛规则，明确未来衡量他们表现的尺度，然后放手让他们去做。</p><h2 id="一、产出导向"><a href="#一、产出导向" class="headerlink" title="一、产出导向"></a>一、产出导向</h2><p>格鲁夫认为，中层管理者的职责就是一切以产出最大化为出发点，想方设法提高整个团队的产能。对于中层管理者来说，他的产出等于他所领导的组织产出的总和。他所从事的每一项管理活动，对整个组织都有或多或少的影响。影响的大小，取决于中层管理者在这项活动中的杠杆率的大小。</p><p>杠杆率，是指中层管理者在各个具体的管理活动中，通过自身的管理能力所带来的产出。在作者看来，一个管理活动如果有比较高的杠杆率，就表示同样的投入下，这项活动会比杠杆率低的活动有更高的产出。比如早餐店的服务员，如果能在同样的时间里做好两份早餐，他的杠杆率就比同一时间只能做一份早餐的员工高。</p><p>为了提高工作杠杆率，必须找出决定整个生产流程的“限制步骤”，把大部分精力放在这些杠杆率较高的活动上。明确了哪些事情一定要在某个时间做完之后，再把其他相对而言不那么重要的活动穿插进去，从而提高工作效率。</p><p>此外，把类似的工作集中在一起做，建立标准化的办事程序，减少花在切换工作场景上的准备时间，也能有效提高工作产出。</p><h2 id="二、团队意识"><a href="#二、团队意识" class="headerlink" title="二、团队意识"></a>二、团队意识</h2><p>格鲁夫认为，一个中层管理者的产出，是他所管理和影响的下属工作的成效总和。要想让整个组织持续地具有创造力和战斗力，通过开会交流意见、达成共识并且进一步形成团队意识非常重要。</p><p>在作者看来，开会是有用的，而且是必须的，会议是从事管理工作必须的媒介。中层管理者不可能避免开会，但他们可以让开会这件事变得更有效率。中层管理者工作中很重要的一个部分，是提供信息与技术，把高效、优质的行事方法传授给受他管辖或影响的人。另外，中层管理者还要制定决策，或者帮助别人制定决策。这两种职责，都必须要通过面对面的开会才能更好地履行。</p><p>作者建议可以定期召开一对一的会议。这种会议之所以有巨大的杠杆率，是因为它可以让上司和下属在会议上建立起共同的信息基础，以及相似的处事方式。这样一来，整个团队就拥有了共同的意识，指哪儿打哪儿，效率自然也就高了。</p><h2 id="三、绩效考核"><a href="#三、绩效考核" class="headerlink" title="三、绩效考核"></a>三、绩效考核</h2><p>绩效考核作为中层管理者给下属的工作反馈，常常被用来决定对下属的奖励，不管是职务上的升迁、加薪、还是分配股份等其他方式。</p><p>通过做绩效考核，一方面可以考察下属的技能水平，看看他是不是缺乏一些技能；另一方面，可以加强激励的力度，好让已经具备适当技能的人能创造出更高的绩效。</p><p>作者认为，好的绩效考核是管理杠杆率最高的行为。但是，并不是只有那些大型企业或者组织才需要绩效考核，无论是只有一两个人的工作室还是十几个人的创业公司，只要你在乎运营的效果，绩效考核就必不可少。</p><p>中层管理者如果想提高团队的绩效，第一步是训练提升下属的知识和技能，第二步是让“自我实现”成为每一位下属工作的动力。只有这样，他们才会自发地去解决工作中的问题，工作动力才能源源不绝。为此，中层管理者需要做的是站在下属的立场看待下属的工作，引入竞技精神，帮他设定衡量指标，找好对手并制定跑道，下属很自然地就会在这个跑道上自我驱动，不断向前。</p><p>绩效考核虽然很重要，但也要讲究灵活性。即使下属没有达成当初设定的目标，他的绩效考核仍然有可能被评为卓越。目标管理的用意，是让人能够按照设定的进度做事，但它并不是决定奖惩的标准。如果上司只是用目标管理来决定下属的功过得失，以至于下属只专注在制定好的目标，而错失了其他更好的可能，往往会造成“只见树木、不见森林”的后果。</p><h2 id="金句"><a href="#金句" class="headerlink" title="金句"></a>金句</h2><ol><li>提高产能的一个重要的方法，就是先找出具有较高杠杆率的“限制步骤”，然后再把大部分的精力放在这些活动上。</li><li>建立标准化的办事程序，化“不规律”为“规律”，建立起处理问题的固定模式，是提高工作产出的一种重要方式。</li><li>一对一的会议之所以有巨大的杠杆率，是因为它可以让上司和下属在会议上建立起共同的信息基础，以及相似的处事方式。</li><li>如果上司只是用目标管理来决定下属的功过得失，以至于下属只专注在制定好的目标，而错失了其他更好的可能，往往会造成“只见树木、不见森林”的后果。</li><li>把办公室变成竞技场，能培养下属的“运动员精神”。求胜但不怕输，随时向自己的极限挑战，这是一个团队能不断前进的主要动力。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于作者&quot;&gt;&lt;a href=&quot;#关于作者&quot; class=&quot;headerlink&quot; title=&quot;关于作者&quot;&gt;&lt;/a&gt;关于作者&lt;/h2&gt;&lt;p&gt;安迪·格鲁夫，英特尔公司的创始人兼 CEO。在他的带领下，英特尔公司多次成功转型，从一家濒临倒闭的存储器公司，发展成为全球大
      
    
    </summary>
    
    
      <category term="tip" scheme="http://jinzhan.github.io/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>永远幸福的科学</title>
    <link href="http://jinzhan.github.io/05/27/2018/%E6%B0%B8%E8%BF%9C%E5%B9%B8%E7%A6%8F%E7%9A%84%E7%A7%91%E5%AD%A6/"/>
    <id>http://jinzhan.github.io/05/27/2018/永远幸福的科学/</id>
    <published>2018-05-27T14:41:09.000Z</published>
    <updated>2018-11-25T16:26:08.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>泰·田代是美国马里兰大学情感、性格以及成瘾症研究中心的资深研究员，探索传播公司旗下美体健康频道的情感专家。他曾获得明尼苏达大学心理学博士学位，在马里兰大学以及科罗拉多大学获得年度优秀教授荣誉。他的研究成果已在多种世界学术期刊上发表。作为恋爱问题的专家，泰·田代博士对如何保持持久恋爱方面有独特研究见解。</p><h2 id="关于本书"><a href="#关于本书" class="headerlink" title="关于本书"></a>关于本书</h2><p>本书通过深入科学研究，从生活中的真实案例着手，提出了寻找持久爱情的方法。我们能够根据本书提供的方法看懂自己的伴侣，也能够在它的指导下找到让自己幸福的另一半。了解了他的研究心得，你就会明白什么样的夫妻会幸福恩爱一辈子，而哪些人并不适合成为理想伴侣；我们自己的性格属于哪种依赖模式，什么性格的伴侣更容易出轨。</p><h2 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h2><p>每个人有不同的特质，而这个特质是很难改变的。心理学家把人的依赖模式分为三种：安全型、回避型和焦虑型。对你的伴侣多考察一段时间，等对方的特质彻底表现出来之后，再去判断对方才会更加准确和可靠。一旦发现伴侣身上表现出的危险信号，应该立即做出科学应对；永远不要自欺欺人，让自己在错误的选择上越走越远。    </p><p>点击查看大图，保存到手机，也可以分享到朋友圈</p><h3 id="一、特质的属性及其预测功能"><a href="#一、特质的属性及其预测功能" class="headerlink" title="一、特质的属性及其预测功能"></a>一、特质的属性及其预测功能</h3><ol><li>特质是指人身上独有和固有的品性</li></ol><p>能力方面的特质包括迟钝还是聪明。性格方面的特质包括内向还是外向，刻薄还是友善，无聊还是有趣，做事认真还是马虎。外貌方面的特质包括高矮、胖瘦、普通或迷人。价值观方面的特质包括宗教信仰、政治取向。总的来说，可以被归为特质的因素范围很广。</p><ol start="2"><li>特质具有稳定性</li></ol><p>特质一方面是从父母那里遗传来的，另一方面是由我们成长的家庭和之后的环境造就的。这些都会使我们的特质难以改变。</p><ol start="3"><li>特质是预测未来状况的利器</li></ol><p>婚前的慎重选择很重要，避免看错人的最好的办法就是，多考察一段时间，等对方的特质充分、彻底地表现出来之后，利用你掌握的利器，再判断一下他会不会带给你永远的幸福。</p><h3 id="二、寻找一个拥有合适特质的人"><a href="#二、寻找一个拥有合适特质的人" class="headerlink" title="二、寻找一个拥有合适特质的人"></a>二、寻找一个拥有合适特质的人</h3><ol><li>理想的伴侣需要的特质是因人而异的</li></ol><p>构成一个人的特质有很多，你需要把你心目中的理想伴侣的特质排出顺序，把你认为能够保证恋情长久的必需条件放在前面。</p><ol start="2"><li>只能许三个愿望</li></ol><p>我们只能许三个愿望，要合理地分配三个愿望。合理的分配指的是三个愿望中可能有的绝对不能更改，其他的稍微有些放宽的余地。</p><ol start="3"><li>过度挑剔会适得其反</li></ol><p>你的条件越多，选择的余地越小，而且条件有时还需要调整，因为有人一开始并不知道自己想要什么。</p><ol start="4"><li>两种非理想伴侣</li></ol><p>一种是神经敏感的人，一种是猎奇心重的人。神经敏感的人是指安全感差、疑神疑鬼的人。猎奇心重的人是指喜欢追求新鲜刺激、不愿意简单重复的人。</p><p>5.宜人性强的人适合做理想的伴侣</p><p>宜人性强的人，不仅更为友善，更亲切体贴，而且更有可能在恋爱关系中做出努力，让对方更满足，使双方的关系持续保鲜。</p><h3 id="三、根据不同依赖模式，选择不同伴侣"><a href="#三、根据不同依赖模式，选择不同伴侣" class="headerlink" title="三、根据不同依赖模式，选择不同伴侣"></a>三、根据不同依赖模式，选择不同伴侣</h3><ol><li>三种依赖模式</li></ol><p>心理学家把依赖模式分为安全型、回避型和焦虑型。安全型的特点是：比较容易和人亲近，也容易依赖他人和被人依赖。回避型正好相反，它的特点是：不适应与他人过于亲近，不大相信别人，也不允许自己去依赖别人。焦虑型的特点是：觉得别人不愿意亲近自己，经常担心伴侣不爱自己或是不愿意和自己在一起。</p><ol start="2"><li>不同依赖模式的不同表现</li></ol><p>安全型的成年人在爱人身边会表现得心情平静。回避型的成年人，有可能从一开始对感情就没有投入很多，他们对工作可能很投入。焦虑型的成年人会紧紧地缠着爱人，生怕失去。</p><ol start="3"><li>根据不同的依赖模式选择伴侣</li></ol><p>研究表明安全型的伴侣能带给你更多的幸福感、恋爱满足感，并且本人在感情中也更容易得到幸福，和他们结合的婚姻也会更稳定。有时人们也会选择和自己的依赖模式相近的人。</p><h3 id="四、要能辨别出伴侣身上的危险信号"><a href="#四、要能辨别出伴侣身上的危险信号" class="headerlink" title="四、要能辨别出伴侣身上的危险信号"></a>四、要能辨别出伴侣身上的危险信号</h3><ol><li>爱情中的归因法</li></ol><p>为事件的出现寻找原因或解释的习性，被心理学家称为“归因。”晚餐约会时你迟到了，而你的伴侣独自一人在餐厅里坐了20分钟等你出现。你的伴侣可以通过四种归因方式解释你的迟到。第一种是他觉得自己没什么价值，你快要离他而去了。这是从自身方面找原因。第二种是他觉得你缺乏责任感，这是从你的角度找原因。第三种是认为你们没有沟通清楚，这是从两个人的关系中找原因。第四种是认为路上堵车，这是从环境方面找原因。第二种，觉得你缺乏责任感，是最有杀伤力的。如果对方在感情中一有争执或一出问题就会归咎到你的身上，这就是一个醒目的危险信号。</p><ol start="2"><li>要求/退缩沟通模式</li></ol><p>伴侣中一方提出要求的时候，并不是在和善地提出要求，而是或多或少带着责备、施压、唠叨和埋怨。用这种方式传递需求，时间一长，伴侣中的另一方也会干脆放弃了探讨问题的努力，主动避免进行任何讨论。</p><ol start="3"><li>虐心的恋情</li></ol><p>它指在一段恋情中，一方因为太爱对方，所以产生强烈的控制欲，经常向对方强加不公。被爱的一方，被爱情折磨得麻木不仁，言听计从，非常痛苦，这是一种畸形的恋爱关系。</p><ol start="4"><li>谨慎对待伴侣间的危险信号</li></ol><p>如果你遇到一个凡事都往你身上推责任，总是带着责备提需求，或者有着强烈的控制欲不公平对待你的人，在有退路的时候尽早离开他。</p><ol start="5"><li>要多听取家人和亲友的意见</li></ol><p>通常来说要在恋爱关系中准确地评判对方的性格，你的朋友和家人才是最有发言权的。</p><h2 id="金句："><a href="#金句：" class="headerlink" title="金句："></a>金句：</h2><ol><li><p>在婚姻中，不存在所谓的输赢，如果双方在一些事情上有了优劣之分，那么从长远来看，夫妻双方都是失败者。</p></li><li><p>区别伟大婚姻和美好婚姻的一个因素，便是感激之情，超越容忍之情的程度。</p></li><li><p>在一段感情上投入了大量时间和精力的人比较容易抓住对方不放。</p></li><li><p>激烈的情感只是昙花一现，如果把激情作为长久恋情的首要目标，那么我们大多只能得到一些美好的片段和悲情的结局。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于作者&quot;&gt;&lt;a href=&quot;#关于作者&quot; class=&quot;headerlink&quot; title=&quot;关于作者&quot;&gt;&lt;/a&gt;关于作者&lt;/h2&gt;&lt;p&gt;泰·田代是美国马里兰大学情感、性格以及成瘾症研究中心的资深研究员，探索传播公司旗下美体健康频道的情感专家。他曾获得明尼苏达大
      
    
    </summary>
    
    
      <category term="tip" scheme="http://jinzhan.github.io/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>坚持,一种可以养成的习惯</title>
    <link href="http://jinzhan.github.io/04/12/2018/%E5%9D%9A%E6%8C%81,%E4%B8%80%E7%A7%8D%E5%8F%AF%E4%BB%A5%E5%85%BB%E6%88%90%E7%9A%84%E4%B9%A0%E6%83%AF/"/>
    <id>http://jinzhan.github.io/04/12/2018/坚持,一种可以养成的习惯/</id>
    <published>2018-04-12T14:05:12.000Z</published>
    <updated>2018-11-25T16:22:22.507Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本书和作者</span><br><span class="line">本书在日本亚马逊网站上一直是读者五星好评的图书。它从研究人的“行动科学”入手，系统地介绍了培养习惯的阶段性特征和应对方法，告诉你行动坚持不去的真相，并帮助你用正确的方法把坚持变成一种习惯，从而让任何习惯就都能够坚持下去！</span><br><span class="line"></span><br><span class="line">作者是日本人，古川武士。现为日本习惯培养顾问公司董事长，有多年培训指导企业经营者和职场人士的经验。</span><br></pre></td></tr></table></figure><h2 id="本书核心内容"><a href="#本书核心内容" class="headerlink" title="本书核心内容"></a>本书核心内容</h2><p><strong>独特观点：把“坚持”这件事本身也变成一种习惯，任何习惯就都能培养。</strong></p><ol><li>坚持不下去的真相</li><li>习惯坚持的三种类型和三个阶段；</li><li>坚持下去的其他技巧</li></ol><h2 id="坚持不下去的真相"><a href="#坚持不下去的真相" class="headerlink" title="坚持不下去的真相"></a>坚持不下去的真相</h2><p>1.习惯引力</p><p>所谓习惯引力，是指身体保持在固定的状态会感受比较舒适，发生变化则被视为是一种威胁。</p><p>每个人都受习惯引力的影响，让身体天然有“对抗新变化、维持现状的倾向”的倾向。</p><p>2.习惯引力的两个功能</p><p>抵抗新变化：若要将某项行动转化为习惯的话，必须克服习惯引力； 维持现状：一旦突破前一个阶段的习惯引力的阻碍，养成习惯后，大脑就会把这种行为认为是日常功能，就会拼命地维持这种行为。</p><h2 id="习惯坚持的三个种类型和三个阶段"><a href="#习惯坚持的三个种类型和三个阶段" class="headerlink" title="习惯坚持的三个种类型和三个阶段"></a>习惯坚持的三个种类型和三个阶段</h2><h3 id="1-习惯的三种类型"><a href="#1-习惯的三种类型" class="headerlink" title="1.习惯的三种类型"></a>1.习惯的三种类型</h3><ul><li>行为习惯：指动动手就可以做到的习惯，比如写日记、整理家务等。一般一个月左右就能养成。</li><li>身体习惯：是指要让整个身体发生变化的习惯，比如减肥、早睡早起等。可能需要三个月左右的时间。</li><li>思考习惯：指像创意思维、批判性思考能力等习惯。这种习惯养成需要更长时间，可能半年，甚至一年两年才能培养起来。</li></ul><p>举例：“21天培养习惯”这个方法为什么有的人适用？有的人不适用？</p><h3 id="2-培养习惯的第一个阶段，反抗期（一般1-7天）"><a href="#2-培养习惯的第一个阶段，反抗期（一般1-7天）" class="headerlink" title="2.培养习惯的第一个阶段，反抗期（一般1-7天）"></a>2.培养习惯的第一个阶段，反抗期（一般1-7天）</h3><p> 症状：身体抗拒改变，只有三分钟热度</p><p>反抗期最容易失败，是因为“习惯引力”在作祟，你想改变可是你的身体在抗拒。</p><p><strong>对策一：以“婴儿学步”开始</strong></p><p>“婴儿学步”是指像小宝宝学走路那样，从小目标做起。</p><p>让要改变的行为对身体的影响尽量减小。跟之前节目《微习惯》中介绍的方法是一样的，</p><p>不过本书给了我们全新的启发，微小的习惯培养，更重要的是用在身体反抗期。</p><p>比如5分钟整理，阅读15分钟；读两页书，写一页日记等微小习惯做起。</p><p><strong>对策二：简单记录</strong></p><p>就是把培养习惯的过程刻意地记录下来。</p><p>记录其实是调动理性的力量，去消除“随意”的感觉，客观的掌握事实，让自己和身体的习惯引力更有效的做斗争。</p><p>比如记录每天读了多少书，减肥期间每天吃了多少食物等等</p><p>###3.培养习惯的第二个阶段，不稳定期（一般8-21天）</p><p>度过身体反抗期之后，身体慢慢就接受了这个新习惯，接下来就要提高习惯培养的强度，而这时习惯引力又开始阻碍我们，从而进入第二个阶段。</p><p>症状：因各种突发事件导致失败，半途而废。</p><p>要度过不稳定期，就要增强身体养成习惯的稳定性，建立能够持续的机制。</p><p><strong>对策一：让行为模式化</strong><br>就是把想要培养的习惯尽可能弄成固定的模式，固定时间，固定地点，固定行为。比如读书习惯，固定在每天晚上8点。</p><p><strong>对策二：设置例外规则</strong><br>先假设可能发生的例外状况，也就能提前考虑好应对措施，让计划保持弹性。比如加班晚了，在路上听一段《每天听本书》来代替每天8点的读书计划。</p><p><strong>对策三：引入奖惩机制</strong><br>进一步从外部的环节来强化前两个对策，“行为模式”和“设定例外规则”，加强对身体 不稳定期的支撑作用。比如实现了连续七天的读书目标，给自己买个礼物奖励自己，如果没达到就罚自己做30个俯卧撑。</p><h3 id="4-培养习惯的第三个阶段，倦怠期（一般22-30天）"><a href="#4-培养习惯的第三个阶段，倦怠期（一般22-30天）" class="headerlink" title="4.培养习惯的第三个阶段，倦怠期（一般22-30天）"></a>4.培养习惯的第三个阶段，倦怠期（一般22-30天）</h3><p>症状：提不起劲，感到厌烦而前功尽弃。</p><p>克服倦怠期，需要“玩点新花样”，通过两种方式进行变化</p><p>对策一：添加新变化</p><p>一件事情重复做，做久了肯定很厌烦，人都有喜新厌旧的毛病。所以要主动给自己添加</p><p>变化。</p><p>案例：日本著名相扑选手贵乃花，成功减肥的方法。</p><p>对策二：计划新习惯</p><p>在倦怠期，计划下一项习惯就是为了建立习惯的连贯性，就像通关打游戏一样，提出一</p><p>个新目标和新愿景，有助于你把这个习惯坚持下去的。</p><h2 id="坚持下去的其他技巧"><a href="#坚持下去的其他技巧" class="headerlink" title="坚持下去的其他技巧"></a>坚持下去的其他技巧</h2><ol><li><p><strong>每次只培养一个习惯</strong>，不要同时培养多个习惯，比如运动或者控制饮食选其一，这样成功概率会提高。</p></li><li><p><strong>习惯的行动规则是越简单越好</strong>，把一个复杂的习惯拆成一些简单的习惯来培养，行动越简单才越好坚持。</p></li><li><strong>不要太在意结果</strong>，注重习惯培养各个阶段的节奏。</li></ol><h2 id="本书金句"><a href="#本书金句" class="headerlink" title="本书金句"></a>本书金句</h2><ol><li>习惯就是把重复的行动化为无意识的行动。</li><li>一旦大脑认定某种行为跟往常一样，就会拼命地维持这种行为，这也是习惯引力的功能。</li><li>培养习惯的过程需要缜密地设计，如果随随便便开始行动，极有可能会因为“习惯引力”的作用而遭到挫败。</li><li>在培养习惯的过程中失败率高的人，通常在一开始就失败了。</li><li>“0与1”的差别远远大于“100与1”的差别。</li><li>一旦建立了固定的行动节奏，身体就能适应“不做不行”的状态。</li><li>人是被习惯所塑造的，优异的结果来自于良好的习惯，而非一时的行动。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="tip" scheme="http://jinzhan.github.io/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>关键时刻</title>
    <link href="http://jinzhan.github.io/03/19/2018/%E5%85%B3%E9%94%AE%E6%97%B6%E5%88%BB/"/>
    <id>http://jinzhan.github.io/03/19/2018/关键时刻/</id>
    <published>2018-03-19T14:22:03.000Z</published>
    <updated>2018-11-25T16:22:43.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于本书作者："><a href="#关于本书作者：" class="headerlink" title="关于本书作者："></a>关于本书作者：</h2><p>詹•卡尔森，32岁，当上了瑞典最大的旅行社的CEO，36岁当上了瑞典境内最大的航空公司的CEO，38岁当上了北欧航空公司的CEO。用了一年时间，就把北欧航空公司，从瑞典政府最头疼的亏损大户变成了全球最赚钱的航空公司之一。46岁撰写本书，风靡全球的管理界和企业界。</p><h2 id="什么是关键时刻？"><a href="#什么是关键时刻？" class="headerlink" title="什么是关键时刻？"></a>什么是关键时刻？</h2><p>关键时刻（MOT)—— Moments of truth，用户和公司之间发生了交互关系的瞬间。</p><p><strong>案例：</strong></p><p>在一年当中，每一个北欧航空的乘客平均每人接触五名员工，会对北欧航空公司产生五次印象，每一次十五秒钟，总共五千万次。而这五千万次的“关键时刻”决定了公司将来的成败。</p><h3 id="一、如何把组织结构翻转过来，变成倒金字塔式的组织形态"><a href="#一、如何把组织结构翻转过来，变成倒金字塔式的组织形态" class="headerlink" title="一、如何把组织结构翻转过来，变成倒金字塔式的组织形态"></a>一、如何把组织结构翻转过来，变成倒金字塔式的组织形态</h3><p>金字塔式：信息自下而上的汇报，命令自上而下的传达。</p><p>倒金字塔：掌握“关键时刻”的员工不用一层层请示上级，管理者们的义务是必须想法设法把基层员工需要的资源解决掉。</p><p><strong>案例1：</strong></p><p>乘客都在抱怨飞机上的咖啡很难喝、面包很难吃。卡尔森把这个问题交给了他们的空乘人员。空姐们提出了解决办法：取消免费的飞机餐和饮料，改为收费的，并且因为有收入，所以可以提高品质，有需求的人更容易对买到的餐食感到满意。</p><p>空姐可以在自己的航班上尝试这个办法，如果卖赔了，要承担风险，但是如果赚钱了，公司和乘务组分红。仅此一项，公司就从付出四十万美金的净成本，变成多赚了好几百万美金。空乘人员的收入提高了，服务水准也进一步提高。很快，这个经验就从卖飞机餐，扩展到了在飞机上销售各种特色商品。</p><p><strong>案例2：</strong></p><p>解决晚点问题的，交给调度中心的一线人员，因为每一次晚点都会影响他们的工作。卡尔森找到调度中心的负责人，他回去写了一份详细的报告，说需要180万美元、六个月。卡尔森直接交给他负责，结果只花了二十万美金、四个多月就把长期以来的顽疾解决。</p><p><strong>案例3：</strong></p><p>海底捞的服务员，只要他认为有必要，都可以给客人免一个菜或加一个菜，甚至免一餐。</p><h3 id="二、如何在企业中做一个沟通者与教育者；"><a href="#二、如何在企业中做一个沟通者与教育者；" class="headerlink" title="二、如何在企业中做一个沟通者与教育者；"></a>二、如何在企业中做一个沟通者与教育者；</h3><p>那就是人人都在进行决策，意味着你必须保证每个人都真正理解公司的目标和战略，对领导者而言，这将是一个巨大的、永无止境的沟通任务。</p><p>卡尔森是这样做的：</p><ol><li><p>强制自己拿出一半的时间，在工作现场与普通员工进行面对面交谈。</p></li><li><p>训练自己的沟通能力，参与各种电视辩论，在这个过程中，不断打磨自己举例子、做推销、吸引人的能力。</p></li><li><p>取消了管理层的一切特权。传递一个理念：这家公司要把所有的精力都放在用户身上。</p></li></ol><h3 id="三、如何找到帮助公司实现盈利的那些最有价值的用户。"><a href="#三、如何找到帮助公司实现盈利的那些最有价值的用户。" class="headerlink" title="三、如何找到帮助公司实现盈利的那些最有价值的用户。"></a>三、如何找到帮助公司实现盈利的那些最有价值的用户。</h3><p>通过观察每架航班的上座率，发现头等舱因为票价太高，经常是坐不满，造成实际损失；经济舱因为必须打折，而赚不到钱。结果就是飞机利用率很低，亏损严重。</p><p>卡尔森在旗下所有的航班上，取消头等舱压缩经济舱，取而代之的是介于头等舱和经济舱之间的商务舱。</p><p>针对那些公司为他们报销差旅费的商务旅客，打造了一个专属的航空公司。找到了拿些价格最不敏感、需求共性最多的客人。</p><p><strong>总结：</strong></p><p>《关键时刻》对管理学最大的贡献，是把很多似是而非的管理理念和方法拉下马来，他的实践证明了，管理者只有一件事是绝对正确的，那就是为员工赋能，激活一线。</p><p>每个管理者应该基于自己的洞察，找到自己行业所特有的MOT，然后，聚焦全部力量，形成单点突破。</p><h2 id="十大关键时刻原则："><a href="#十大关键时刻原则：" class="headerlink" title="十大关键时刻原则："></a>十大关键时刻原则：</h2><ol><li><p>创造顾客比创造利润更重要</p></li><li><p>用提高营业额降低成本</p></li><li><p>领导少些决策力多些综合力</p></li><li><p>了解顾客真正需要把握多变市场</p></li><li><p>一线员工比管理团队更了解企业</p></li><li><p>该冒险的时候必须勇敢一跳</p></li><li><p>“沟通 ”能提升执行力与利润率</p></li><li><p>让董事会了解公司的整体战略</p></li><li><p>保持绩效评估和顾客需要的一致性</p></li><li><p>奖励让顾客满意的“自作主张”</p></li></ol><p><strong>金句：</strong></p><ol><li><p>“永远不要忘记，要想做成好生意，先得拒绝不好的生意”</p></li><li><p>“足球运动员在射门前不可能先请示教练”</p></li><li><p>“先创造出用户，才能创造出利润”</p></li><li><p>“管理者抱怨的员工的每一个坏毛病都是来自管理者”</p></li><li><p>今日的管理者既是倾听者，也是沟通者与教育者，他们善于表达自己，鼓励员工发挥最大的潜力，而不是自行制定所有决策。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于本书作者：&quot;&gt;&lt;a href=&quot;#关于本书作者：&quot; class=&quot;headerlink&quot; title=&quot;关于本书作者：&quot;&gt;&lt;/a&gt;关于本书作者：&lt;/h2&gt;&lt;p&gt;詹•卡尔森，32岁，当上了瑞典最大的旅行社的CEO，36岁当上了瑞典境内最大的航空公司的CEO，38
      
    
    </summary>
    
    
      <category term="tip" scheme="http://jinzhan.github.io/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>你充满电了吗？</title>
    <link href="http://jinzhan.github.io/03/16/2018/%E4%BD%A0%E5%85%85%E6%BB%A1%E7%94%B5%E4%BA%86%E5%90%97/"/>
    <id>http://jinzhan.github.io/03/16/2018/你充满电了吗/</id>
    <published>2018-03-16T15:09:19.000Z</published>
    <updated>2018-11-25T16:26:24.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>汤姆·拉思，美国盖洛普公司全球咨询业务负责人，《纽约时报》、《华尔街日报》的人气作者。他在过去的20年中，出版了五本畅销全球的著作，包含《纽约时报》销售冠军《你的桶子有多满》、《盖洛普优势识别器2.0》等。这些作品总销量已经超过600万册。</p><h2 id="关于本书"><a href="#关于本书" class="headerlink" title="关于本书"></a>关于本书</h2><p>在这本书中，作者汲取来自商业、心理学和经济学的实用研究成果，提炼出让你保持精力充沛、提升工作状态的三大关键因素和帮助你快速充电的技巧。</p><h2 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h2><p>要让自己精力充沛其实很简单，那就是要重视以下三大关键因素：</p><ol><li>创造意义；</li><li>积极互动；</li><li>储备能量。</li></ol><h2 id="一、创造意义"><a href="#一、创造意义" class="headerlink" title="一、创造意义"></a>一、创造意义</h2><ol><li><p>要追求意义而不是追求幸福</p><ol><li>研究证明一：一个人如果越看重个人幸福，他在日常生活中就越容易有孤单和无力感。</li><li>研究证明二：当一个人过着幸福但缺乏有意义的生活时，他们的身体会激发慢性炎症的发生。</li></ol></li><li><p>优先考虑意义而不是金钱</p><p>我们在做决定的时候，会不由自主地陷入到优先考虑金钱而不是意义的习惯里。而优先考虑金钱，会不知不觉分散我们关注生活意义的注意力。有研究证明，当人想到金钱的时候，会拉开和别人的物理距离，把自己孤立起来。</p></li><li><p>内在动机激发热情</p><ul><li>外在动机：你为了某种回报而去做某件事情，比如为了赚钱而工作。一旦没钱，生活就没意义了。</li><li>内在动机：你内心把一件事情做好的愿望，哪怕没有任何金钱回报，你也愿意去做。真正激发我们热情的正是来自内在动机的事情。</li></ul></li><li><p>在工作中寻找意义</p><p>每份工作都有各自的意义，寻找工作能为别人带来的价值，就能让工作有意义，和让自己精力充沛，充满热情。</p></li></ol><h2 id="二、积极互动"><a href="#二、积极互动" class="headerlink" title="二、积极互动"></a>二、积极互动</h2><ol><li><p>80%正面的事情</p><p>跟人聊天互动的内容至少有80%是围绕正面的事情。有研究发现，负能量词汇的效果通常是正能量词汇的4倍。如果你想让别人充满精力和斗志地工作，那你就用80%的时间说正面的、积极的内容，20%的时间来提出不足和改进。</p></li><li><p>花钱买正面互动</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>不是花钱买具体的东西来满足自我物质欲望，而是花钱买体验。有研究发现，体验消费提供的快乐比人们预估的更多，而且持续的价值也要更高。</span><br><span class="line"><span class="bullet">2. </span>花钱买体验的关键在于，把钱花在别人身上，和别人一起互动。针对一组有抑郁症的青少年的调查研究发现：选择把钱给家人的青少年，抑郁症状减轻幅度最大；而把钱自己留着的青少年，抑郁症状加剧的概率变得更高。</span><br></pre></td></tr></table></figure><ol start="3"><li>多表扬别人<br>发自内心地表扬别人，不真诚的表扬其实比批评更有伤害性。</li></ol><h2 id="三、储备能量"><a href="#三、储备能量" class="headerlink" title="三、储备能量"></a>三、储备能量</h2><ol><li><p>对压力的误区<br>认为压力有时间限制，过几天就过去了。其实，压力是会积累的，就像滚雪球。要防止压力堆积，并保持充沛精力，保持健康的生活方式很重要。</p></li><li><p>给身体补充能量</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创造意义和积极互动两个方法，是给精神充电，而健康的生活方式是给身体充电。</span><br><span class="line"><span class="bullet">1. </span>吃好：食物的质量比数量要重要。一些食物能为你提供正能量，另一些食物则具有反作用。比如：蔬菜和水果会让人更冷静更快乐，而油炸食物会让人昏昏欲睡。</span><br><span class="line"><span class="bullet">2. </span>运动：作者提醒一个大多数人没有注意到的问题，那就是天天运动抵消不了长时间坐着给身体带来的危害。</span><br><span class="line"><span class="bullet">3. </span>睡足：保持充足睡眠是保持精力的重要法宝。</span><br></pre></td></tr></table></figure><ol start="3"><li>微笑承受<br>哪怕是假笑和被迫笑也能帮助你应对压力。有医学研究证明，在皱眉肌注射肉毒杆菌的参与者，会因为不能愁眉苦脸，有52%的人抑郁症得到了缓解。</li></ol><h2 id="金句："><a href="#金句：" class="headerlink" title="金句："></a>金句：</h2><ol><li>一个人如果越看重个人幸福，他在日常生活中就越容易有孤单和无力感。</li><li>金钱和意义，哪个是前提很重要。</li><li>负能量词汇的效果通常是正能量词汇的4倍。换句话说，前面80%的积极正面信息，刚好能让别人接受后面20%的消极信息还能心平气和。</li><li>能赚钱很棒，但我做事的动力来自创造伟大的产品而不是利润。——乔布斯</li><li>财富会导致人们花在喜欢的事情上时间变少，而花在带来压力的事情上的时间变多。——丹尼尔·卡尼曼</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于作者&quot;&gt;&lt;a href=&quot;#关于作者&quot; class=&quot;headerlink&quot; title=&quot;关于作者&quot;&gt;&lt;/a&gt;关于作者&lt;/h2&gt;&lt;p&gt;汤姆·拉思，美国盖洛普公司全球咨询业务负责人，《纽约时报》、《华尔街日报》的人气作者。他在过去的20年中，出版了五本畅销全球
      
    
    </summary>
    
    
      <category term="tip" scheme="http://jinzhan.github.io/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>Web前端面试题(2017年)</title>
    <link href="http://jinzhan.github.io/03/20/2017/interview-question/"/>
    <id>http://jinzhan.github.io/03/20/2017/interview-question/</id>
    <published>2017-03-20T15:35:09.000Z</published>
    <updated>2018-11-25T16:33:42.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端基础知识"><a href="#前端基础知识" class="headerlink" title="前端基础知识"></a>前端基础知识</h2><ol><li>请写下display属性有哪些属性，每个属性的意义</li><li>写出常用的CSS选择符，至少5种，并说出他们的优先级</li><li>两栏布局，左侧固定右侧自适应，写出所有可以实现的方案</li><li>使用css3做一个旋转的动画效果</li><li>css如何清除浮动</li><li>如何实现响应式布局</li><li>删除数组a中值为m的项</li><li>js中如何定义一个只读变量、属性</li><li>前端有哪些方法可以实现本地的数据储存，有什么区别</li><li>怎么用canvas加载一张图片</li><li>一个ul下有多个li，点击任意一个alert出其index</li><li><p>使用正则表达式，验证表单中输入的是一个url（尽可能精确），如：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提示，网站链接形式：</span><br><span class="line">- http://www.baidu.com</span><br><span class="line">- https://know.baidu.com/question/<span class="number">33546162633632336435650200</span>/<span class="number">401301</span></span><br><span class="line">- https://www.baidu.com/s?wd=<span class="symbol">%E7</span><span class="symbol">%99</span><span class="symbol">%BE</span><span class="symbol">%E5</span><span class="symbol">%BA</span><span class="symbol">%A6</span><span class="symbol">%E6</span><span class="symbol">%B4</span><span class="symbol">%BE</span>&amp;rsv_spt=<span class="number">1</span>&amp;rsv_iqid=<span class="number">0x9741e0c70008a553</span>&amp;issp=<span class="number">1</span>&amp;f=<span class="number">8</span>&amp;rsv_bp=<span class="number">0</span>&amp;rsv_idx=<span class="number">2</span>&amp;ie=utf<span class="number">-8</span>&amp;tn=baiduhome_pg&amp;rsv_enter=<span class="number">1</span>&amp;rsv_sug<span class="number">3</span>=<span class="number">9</span>&amp;rsv_sug<span class="number">1</span>=<span class="number">9</span>&amp;rsv_sug<span class="number">7</span>=<span class="number">100</span>&amp;rsv_sug<span class="number">2</span>=<span class="number">0</span>&amp;inputT=<span class="number">1629</span>&amp;rsv_sug<span class="number">4</span>=<span class="number">1630</span>&amp;rsv_sug=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>((a,…b) =&gt; a*b.length)(1, 2, 3, 4, 5)返回值是多少;</p></li><li><p>写一个方法flatten，将多维数组转化为一维数组：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a1 = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]];</span><br><span class="line">let a2 = [<span class="number">0</span>, [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>]]]]]];</span><br><span class="line">flatten(a1) <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br><span class="line">flatten(a2) <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>写出返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="keyword">function</span> (<span class="params">x, y, z</span>) </span>&#123; <span class="keyword">return</span> x + <span class="number">10</span> * y + <span class="number">100</span> * z;&#125;;</span><br><span class="line"><span class="keyword">let</span> b = a.bind(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">b(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 求返回值</span></span><br></pre></td></tr></table></figure></li><li><p>用js实现冒泡排序</p></li><li><p>九宫格实现最短路径</p><p>| 10 | 9 | 8 |<br>|—-|—-|—-|<br>| 7 | 5 | 9 |<br>| 6 | 3 | 2 |</p></li><li><p>写出Vue生成的HTML结构</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;hello-world :level=level&gt;</span><br><span class="line">   &lt;div slot=<span class="string">"h1"</span>&gt;Hello Foo&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;div slot="h2"&gt;Hello Bar&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/hello-world&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line">Vue.component(<span class="string">'hello-world'</span>, &#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(</span><br><span class="line">      <span class="string">'h'</span> + <span class="keyword">this</span>.level,</span><br><span class="line">      [</span><br><span class="line">        <span class="keyword">this</span>.$slots[<span class="string">'h'</span> + <span class="keyword">this</span>.level],</span><br><span class="line">        <span class="string">'Hello World'</span></span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    level: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    level: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="系统知识"><a href="#系统知识" class="headerlink" title="系统知识"></a>系统知识</h2><ol><li>为什么 0.1 + 0.2 === 0.3 为 false </li><li>怎么画出0.5px的边框，有哪些方案</li><li>请解释进程和线程的区别</li><li>请解释下js中的事件轮询的机制</li><li>请说说你对Vue或React中虚拟dom的理解</li><li>浏览器如何判断访问本地缓存还是请求服务器</li><li>请至少说出一个你实现的组件，组件功能/参数/调用方式</li></ol><h2 id="开放问答"><a href="#开放问答" class="headerlink" title="开放问答"></a>开放问答</h2><h3 id="最能代表技术的案例？"><a href="#最能代表技术的案例？" class="headerlink" title="最能代表技术的案例？"></a>最能代表技术的案例？</h3><ul><li>前后端怎么配合的？</li><li>负责了哪个部分</li><li>其中的技术难点在哪儿</li><li>怎么实现的</li></ul><h3 id="有哪些技术产出？"><a href="#有哪些技术产出？" class="headerlink" title="有哪些技术产出？"></a>有哪些技术产出？</h3><ul><li>有开源的项目么</li><li>有做过技术分享么（组内）</li></ul><h3 id="为什么会选择离开当前的团队呢？"><a href="#为什么会选择离开当前的团队呢？" class="headerlink" title="为什么会选择离开当前的团队呢？"></a>为什么会选择离开当前的团队呢？</h3><h3 id="你当下最关注的技术是什么？"><a href="#你当下最关注的技术是什么？" class="headerlink" title="你当下最关注的技术是什么？"></a>你当下最关注的技术是什么？</h3><h3 id="未来的职业规划"><a href="#未来的职业规划" class="headerlink" title="未来的职业规划"></a>未来的职业规划</h3><div style="display:none"><br>## 自问自答，哈哈哈哈<br>11.<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">$(<span class="string">'ul'</span>).click(<span class="string">'li'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="keyword">this</span>).index());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> len = li.length;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;len;i++)&#123;</span><br><span class="line">  !<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    li[i].onclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(i)&#125;);</span><br><span class="line">  &#125;(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>14.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">prev, current, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev.concat(<span class="built_in">Array</span>.isArray(current) ? flatten(current) : current);</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><br>15.<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var bubbling = <span class="function"><span class="keyword">function</span><span class="params">(arr)</span>&#123;</span></span><br><span class="line">var len = arr.<span class="built_in">length</span>;</span><br><span class="line">var <span class="built_in">i</span>;</span><br><span class="line"><span class="keyword">while</span>(len--) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">i</span> = <span class="number">0</span>;<span class="built_in">i</span>&lt;len;<span class="built_in">i</span>++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[<span class="built_in">i</span>] &gt; arr[<span class="built_in">i</span>+<span class="number">1</span>]) &#123;</span><br><span class="line">arr[<span class="built_in">i</span>] ^= arr[<span class="built_in">i</span>+<span class="number">1</span>];</span><br><span class="line">arr[<span class="built_in">i</span>+<span class="number">1</span>] ^= arr[<span class="built_in">i</span>];</span><br><span class="line">arr[<span class="built_in">i</span>] ^= arr[<span class="built_in">i</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端基础知识&quot;&gt;&lt;a href=&quot;#前端基础知识&quot; class=&quot;headerlink&quot; title=&quot;前端基础知识&quot;&gt;&lt;/a&gt;前端基础知识&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;请写下display属性有哪些属性，每个属性的意义&lt;/li&gt;
&lt;li&gt;写出常用的CSS选择符，至
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sed命令中的N</title>
    <link href="http://jinzhan.github.io/08/03/2016/sed-n/"/>
    <id>http://jinzhan.github.io/08/03/2016/sed-n/</id>
    <published>2016-08-03T02:35:09.000Z</published>
    <updated>2018-11-25T16:08:34.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>想把下面一组的uid和wealth弄到同一行，有什么好的实现方式呢？</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">uid<span class="string">[1025472]</span></span><br><span class="line">wealth<span class="string">[33600]</span></span><br><span class="line">uid<span class="string">[1025472]</span></span><br><span class="line">wealth<span class="string">[33600]</span></span><br><span class="line">uid<span class="string">[1031052]</span></span><br><span class="line">wealth<span class="string">[4800]</span></span><br><span class="line">uid<span class="string">[1031052]</span></span><br><span class="line">wealth<span class="string">[4800]</span></span><br><span class="line">uid<span class="string">[1031697]</span></span><br><span class="line">wealth<span class="string">[4800]</span></span><br><span class="line">uid<span class="string">[1031697]</span></span><br><span class="line">wealth<span class="string">[4800]</span></span><br></pre></td></tr></table></figure><p><strong>答案</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed 'N;s/\n//g' w.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>和awk类似，sed语句的基本结构也是 sed ‘模式{动作1;动作2}’ file 的执行方式。不过sed中有两个空间，一个叫pattern space（模式空间），一个叫hold buffer（缓冲区/缓冲空间），sed中的模式匹配的对象只是模式空间，和awk一样，sed也是一行一行的读入文本，不过sed在执行命令前，会将文本的行读到模式空间中，然后执行模式{动作}语句，而在执行命令完后，默认sed还是把模式空间的内容打印出来（通过-n 参数可以把最后默认打印模式空间的动作取消）。</p><p><strong>实例1</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq <span class="number">6</span> | sed -n 'N;P'</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>[解析]</strong></p><p> 这个命令就是输出的奇数行，怎么来实现的呢？首先N的作用是读取下一行内容，追加到模式空间里，那sed是逐行执行的，这时候读取1，N把下一行追加到模式空间，那模式空间里的内容就变成了 1\n2 虽然是2行，但是这时候sed把2行看做中间有个换行符的一个整体内容，在模式空间里面。然后继续执行命令P，打印第一行内容。那么1就输出到了屏幕上，接着读取3，N追加4，P输出3，这样一直按这个顺序执行，输出了所有奇数行。这个命令是不是很巧妙？</p><p><strong>实例2</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq <span class="number">5</span> | sed -n 'N;P'</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>[解析]</strong></p><p>输出奇数行？5没有输出。是的，这是为什么呢？可以info sed看看N的解释“If there is no more input then ‘sed’ exits without processing any more commands.”，如果没有可以追加的内容，那么sed将不会处理后面的任何命令。当sed读到5的时候，已经没有下一行内容了，那么N将退出，也不再执行后面的P。所以5没有输出。怎么解决呢？</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq <span class="number">5</span> | sed -n '$!N;P'</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>[解析]</strong></p><p>$!N就是N对最后一行不起作用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;想把下面一组的uid和wealth弄到同一行，有什么好的实现方式呢？&lt;/p&gt;
&lt;figure class=&quot;highlight access
      
    
    </summary>
    
    
      <category term="sed" scheme="http://jinzhan.github.io/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title>Texas Holdem Poker Skills</title>
    <link href="http://jinzhan.github.io/05/25/2016/Top-Five-Texas-Holdem-Poker-Skills/"/>
    <id>http://jinzhan.github.io/05/25/2016/Top-Five-Texas-Holdem-Poker-Skills/</id>
    <published>2016-05-25T12:28:28.000Z</published>
    <updated>2018-11-25T16:08:34.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Top-Five-Texas-Holdem-Poker-Skills"><a href="#Top-Five-Texas-Holdem-Poker-Skills" class="headerlink" title="Top Five Texas Holdem Poker Skills"></a>Top Five Texas Holdem Poker Skills</h2><p>When you play Texas Holdem poker there are definitely a few skills that you will want to have and others you will always want to work on.</p><p>Let’s look at each one of these and give you an idea of which ones are the most important.</p><h3 id="1-Table-Selection"><a href="#1-Table-Selection" class="headerlink" title="1. Table Selection"></a>1. Table Selection</h3><p>There may not be anything more important than selecting the right table when it comes to playing Texas Holdem.  You can play extremely good poker, but if excellent players surround you, your win rate is going to be less.  Conversely, if inexperienced players surround you, your chances of making money are better, even if you make a few mistakes.  You can make a great deal of money against bad poker players, but you can lose a lot against the great ones.  Picking the softest table may sound gutless, but you would rather be smart in selecting a table you know you can beat.</p><h3 id="2-Hand-Selection"><a href="#2-Hand-Selection" class="headerlink" title="2. Hand Selection"></a>2. Hand Selection</h3><p>The biggest mistake most players make when playing poker is playing too many hands.  If you have the discipline only to play strong hands, your chances of making money are much better.  Patience is definitely a virtue in poker and waiting for strong hands is a good idea.  When you do get the strong hand, make sure and raise accordingly.</p><h3 id="3-Reading-Opponent’s-Hands"><a href="#3-Reading-Opponent’s-Hands" class="headerlink" title="3. Reading Opponent’s Hands"></a>3. Reading Opponent’s Hands</h3><p>It is always important to try and put your opponent on a hand.  You are not always going to be right, but if you really work at it, you might be surprised how often you are correct.  Every action a player takes gives you information about the hand they hold.  You make guesses based on the actions they take.</p><h3 id="4-Pot-Odds"><a href="#4-Pot-Odds" class="headerlink" title="4. Pot Odds"></a>4. Pot Odds</h3><p>Always be aware of pot odds. The professional poker player always knows if the odds are worth it.  You can count the number of “outs” you have to estimate and decide if calling is a positive play.  It is a calculation based on your outs, the money you have to lay out, and the money in the pot.</p><h3 id="5-Analyzing-Your-Opponent"><a href="#5-Analyzing-Your-Opponent" class="headerlink" title="5.  Analyzing Your Opponent"></a>5.  Analyzing Your Opponent</h3><p>You want to be aware of what you opponent is likely to do.  There are the maniacs, the calling station, the tight player, etc.  You want to be aware of each of these tendencies in regards to your opponents.  The more you can put your opponent on a particular type of player, the better chance you have to predict how they will play. </p><h2 id="The-Gap-Concept"><a href="#The-Gap-Concept" class="headerlink" title="The Gap Concept"></a>The Gap Concept</h2><p>You need a better hand to call a raise with Than you do to make a raise with (For example, if I was first part, I will raise pairs with 9, or I would raise with it rather than call).</p><h2 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h2><p>See how opponents act before my turn to act.</p><p>Have the last opportunity to bluff.</p><p>Extract more money from opponents.</p><h2 id="Five-Reasons-to-Raise"><a href="#Five-Reasons-to-Raise" class="headerlink" title="Five Reasons to Raise"></a>Five Reasons to Raise</h2><ol><li><p>Get more money in pot.</p></li><li><p>Limit the competition.</p></li><li><p>Take control of betting.</p></li><li><p>Make opponents define hands.</p></li><li><p>Steal BLINDS and ANTES.</p></li></ol><h2 id="Odds-and-Outs"><a href="#Odds-and-Outs" class="headerlink" title="Odds and Outs"></a>Odds and Outs</h2><p>Step 1  Counting Outs.</p><p>Step 2  The Rule of 4 &amp; 2.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">56</span>s for example</span><br><span class="line"></span><br><span class="line">Flop: Qs3h7s</span><br><span class="line"></span><br><span class="line">Rule <span class="keyword">of</span> <span class="number">4</span>:</span><br><span class="line"></span><br><span class="line">Odds: (<span class="number">9</span> + <span class="number">3</span>) * <span class="number">4</span> = <span class="number">48</span><span class="comment">%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Turn: <span class="number">8</span>c</span><br><span class="line"></span><br><span class="line">Rule <span class="keyword">of</span> <span class="number">2</span>:</span><br><span class="line">(<span class="number">9</span> + <span class="number">3</span> + <span class="number">3</span>) * <span class="number">2</span> = <span class="number">30</span><span class="comment">%</span></span><br></pre></td></tr></table></figure><p>Step 3 Calculating Pot Odds</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Pots:</span> <span class="number">400</span></span><br><span class="line"><span class="symbol">Bet:</span> <span class="number">100</span></span><br><span class="line"><span class="symbol">Odds:</span> <span class="number">100</span>/(<span class="number">400</span> + <span class="number">100</span>) = <span class="number">20</span>%</span><br></pre></td></tr></table></figure><p>Step 4 Make Winning Decisions</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> Outs </span><br><span class="line"></span><br><span class="line"><span class="number">5</span> * <span class="number">4</span> = <span class="number">20</span>%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Implied Odds</span><br></pre></td></tr></table></figure><h2 id="Take-Time-to-Think"><a href="#Take-Time-to-Think" class="headerlink" title="Take Time to Think"></a>Take Time to Think</h2><ol><li>Opponents playing conservatively or aggressively ?</li><li>What hands are my opponents likely to hold ?</li><li>What do my opponents think I have ?</li><li>Am I in good position or bad position ?</li><li>Should I bet or raise ?</li></ol><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Best hand?</span><br><span class="line">Bet<span class="built_in"> or </span>Raise</span><br><span class="line"></span><br><span class="line">Force weak</span><br><span class="line">opponents out?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Should I<span class="built_in"> check </span>or fold?</span><br><span class="line"></span><br><span class="line">Worst hand ?</span><br><span class="line">check<span class="built_in"> or </span>fold</span><br></pre></td></tr></table></figure><h2 id="Take-Time-Out-After-Significant-Changes"><a href="#Take-Time-Out-After-Significant-Changes" class="headerlink" title="Take Time Out After Significant Changes"></a>Take Time Out After Significant Changes</h2><ul><li>How has my image changed?</li><li>Who may be on tilt?</li><li>should I change gears?</li></ul><h2 id="Common-Mistakes"><a href="#Common-Mistakes" class="headerlink" title="Common Mistakes"></a>Common Mistakes</h2><p>Bad players make the same mistakes over and over.</p><p>Poker players who exploit bad players and their mistakes will win.</p><h3 id="Common-Mistakes-1"><a href="#Common-Mistakes-1" class="headerlink" title="Common Mistakes"></a>Common Mistakes</h3><ul><li>They don’t bluff enough.</li><li>They over-value top pair.</li><li>They don’t bet enough.</li><li>They call too much instead of folding or raising.</li><li>They play too timidly.</li><li>They telegraph the strength of their hand with tells.</li><li>They go on tilt.</li></ul><h3 id="Steal-the-Blinds"><a href="#Steal-the-Blinds" class="headerlink" title="Steal the Blinds"></a>Steal the Blinds</h3><ul><li>No bad beats.</li><li>No big suck outs.</li><li>No big desisions.</li></ul><h4 id="strategy"><a href="#strategy" class="headerlink" title="strategy"></a>strategy</h4><ul><li>Target the Average Stacks.<ul><li>Average Stacks can afford to fold.</li><li>Big Stacks are likely to call because they can afford to take risk.</li><li>Small Stacks are likely to call because they’re desperate.</li></ul></li></ul><h4 id="Bluffs"><a href="#Bluffs" class="headerlink" title="Bluffs"></a>Bluffs</h4><ul><li>My opponent believes I’m playing tight.</li><li>My opponent hasn’t witnessed a bluff from me recently.</li><li>My opponent isn’t likely to have a great hand or a great draw.</li><li>My hand can’t win without a bet.</li><li>My oppenent isn’t anywhere near pot committed.</li><li>My oppenent is likely to think the last card helped me.</li><li>Bluffing effectively is a part of Selective Aggression.</li><li>Pick your spots carefully then play them aggressively.</li></ul><h2 id="Make-the-Big-Laydown"><a href="#Make-the-Big-Laydown" class="headerlink" title="Make the Big Laydown"></a>Make the Big Laydown</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Top-Five-Texas-Holdem-Poker-Skills&quot;&gt;&lt;a href=&quot;#Top-Five-Texas-Holdem-Poker-Skills&quot; class=&quot;headerlink&quot; title=&quot;Top Five Texas Holdem Po
      
    
    </summary>
    
    
      <category term="Poker" scheme="http://jinzhan.github.io/tags/Poker/"/>
    
  </entry>
  
  <entry>
    <title>Code Complete笔记</title>
    <link href="http://jinzhan.github.io/04/23/2016/summary-of-code-complete/"/>
    <id>http://jinzhan.github.io/04/23/2016/summary-of-code-complete/</id>
    <published>2016-04-23T14:15:08.000Z</published>
    <updated>2018-11-25T16:08:34.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件构建-What-is-software-construction"><a href="#软件构建-What-is-software-construction" class="headerlink" title="软件构建 What is software construction"></a>软件构建 What is software construction</h2><ul><li>定义问题 (Problem Definition)</li><li>需求分析 (Requiremnets Development)</li><li>规划构建 (Construction Planning)</li><li>软件架构 (Software Architecture)，或高层设计(High-Level Design)</li><li>详细设计 (Detailed Design)</li><li>编码与调试 (Coding and Debugging)</li><li>单元测试 (Unit Testing)</li><li>集成测试 (Integration Testing)</li><li>集成 (Integration)</li><li>系统测试 (System Testing)</li><li>保障维护 (Corrective Maintenance)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件构建-What-is-software-construction&quot;&gt;&lt;a href=&quot;#软件构建-What-is-software-construction&quot; class=&quot;headerlink&quot; title=&quot;软件构建 What is software co
      
    
    </summary>
    
    
      <category term="开发流程" scheme="http://jinzhan.github.io/tags/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何进行日志分析</title>
    <link href="http://jinzhan.github.io/04/18/2016/how-to-analyze-log/"/>
    <id>http://jinzhan.github.io/04/18/2016/how-to-analyze-log/</id>
    <published>2016-04-18T11:26:25.000Z</published>
    <updated>2018-11-25T16:08:34.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定位模块所在集群"><a href="#定位模块所在集群" class="headerlink" title="定位模块所在集群"></a>定位模块所在集群</h2><p>###附加</p><ul><li><a href="http://wiki.baidu.com/pages/viewpage.action?pageId=53022308" target="_blank" rel="noopener">Iknow数据库集群</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定位模块所在集群&quot;&gt;&lt;a href=&quot;#定位模块所在集群&quot; class=&quot;headerlink&quot; title=&quot;定位模块所在集群&quot;&gt;&lt;/a&gt;定位模块所在集群&lt;/h2&gt;&lt;p&gt;###附加&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.baidu.
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://jinzhan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>前端模板分析</title>
    <link href="http://jinzhan.github.io/04/16/2016/template-regist-function/"/>
    <id>http://jinzhan.github.io/04/16/2016/template-regist-function/</id>
    <published>2016-04-16T07:16:59.000Z</published>
    <updated>2018-11-25T16:08:34.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端模板"><a href="#前端模板" class="headerlink" title="前端模板"></a>前端模板</h2>]]></content>
    
    <summary type="html">
    
      前端模板分析
    
    </summary>
    
    
      <category term="template" scheme="http://jinzhan.github.io/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>学习使用nginx</title>
    <link href="http://jinzhan.github.io/04/16/2016/getting-start-to-use-nginx/"/>
    <id>http://jinzhan.github.io/04/16/2016/getting-start-to-use-nginx/</id>
    <published>2016-04-16T01:09:09.000Z</published>
    <updated>2018-11-25T16:08:34.373Z</updated>
    
    <content type="html"><![CDATA[<p>##nginx启动、重启、关闭</p><p>###启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>###重启</p><p><strong>更改配置重启nginx</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kill -HUP 主进程号或进程号文件路径</span><br><span class="line">或</span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/nginx/sbin</span></span><br><span class="line"><span class="string">./nginx</span> -s <span class="keyword">reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断配置文件是否正确　</span></span><br><span class="line"></span><br><span class="line">nginx -t -c <span class="string">/usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">cd</span>  <span class="string">/usr/local/nginx/sbin</span></span><br><span class="line"><span class="string">./nginx</span> -t</span><br></pre></td></tr></table></figure><p>###关闭</p><ul><li>查询nginx主进程号 ps -ef | grep nginx</li><li>从容停止   kill -QUIT 主进程号</li><li>快速停止   kill -TERM 主进程号</li><li>强制停止   kill -9 nginx</li><li>若nginx.conf配置了pid文件路径，如果没有，则在logs目录下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -信号类型 <span class="string">'/usr/local/nginx/logs/nginx.pid'</span></span><br></pre></td></tr></table></figure><p>###升级</p><ol><li>先用新程序替换旧程序文件</li><li>kill -USR2 旧版程序的主进程号或者进程文件名<ul><li>此时旧的nginx主进程会把自己的进程文件改名为.oldbin，然后执行新版nginx，此时新旧版本同时运行</li></ul></li><li>kill -WINCH 旧版本主进程号</li><li>不重载配置启动新/旧工作进程    <code>kill -HUP 旧/新版本主进程号</code></li><li>从容关闭旧/新进程 <code>kill -QUIT 旧/新进程号</code></li><li>快速关闭旧/新进程 <code>kill -TERM 旧/新进程号</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##nginx启动、重启、关闭&lt;/p&gt;
&lt;p&gt;###启动&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="tip" scheme="http://jinzhan.github.io/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>如何做到高效面试</title>
    <link href="http://jinzhan.github.io/04/15/2016/how-to-make-a-interview/"/>
    <id>http://jinzhan.github.io/04/15/2016/how-to-make-a-interview/</id>
    <published>2016-04-15T08:19:29.000Z</published>
    <updated>2018-11-25T16:08:34.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h2><h3 id="1-明确岗位要求，研究简历"><a href="#1-明确岗位要求，研究简历" class="headerlink" title="1.明确岗位要求，研究简历"></a>1.明确岗位要求，研究简历</h3><ul><li>根据岗位要求，明确岗位素质（软性，硬性素质）</li><li>提前研究简历，寻找亮点项目和技能</li></ul><h3 id="2-设计提问框架，梯度式问题组合"><a href="#2-设计提问框架，梯度式问题组合" class="headerlink" title="2.设计提问框架，梯度式问题组合"></a>2.设计提问框架，梯度式问题组合</h3><ul><li>针对硬性、软性素质，设计提问。比如：考察学习能力，从行业领先技术的了解程度，自身知识理解等纬度考察；</li><li>问题排列组合，梯度设计，软性-硬性-软性素质</li></ul><h3 id="3-项目提问：STAR法穿插专业性提问"><a href="#3-项目提问：STAR法穿插专业性提问" class="headerlink" title="3.项目提问：STAR法穿插专业性提问"></a>3.项目提问：STAR法穿插专业性提问</h3><ul><li>使用STAR模板，将step1中选中的亮点项目进行问题设计</li><li>用STAR提问项目，是为了验证step2中设计的问题考察点</li></ul><h3 id="4-综合素质-软题库，前沿性知识提问"><a href="#4-综合素质-软题库，前沿性知识提问" class="headerlink" title="4.综合素质-软题库，前沿性知识提问"></a>4.综合素质-软题库，前沿性知识提问</h3><ul><li>提问建立以外的开发性问题</li><li>对未来发展方向自己的认识</li><li>了解合作能力等软性素质</li></ul><h2 id="面试环节"><a href="#面试环节" class="headerlink" title="面试环节"></a>面试环节</h2><h3 id="第1轮-技术基础"><a href="#第1轮-技术基础" class="headerlink" title="第1轮  技术基础"></a>第1轮  技术基础</h3><ul><li>编程语言（语言掌握情况，实际代码编写能力）</li><li>抽象能力（对于问题本身如何抽象，能否映射到具体的方法、算法上去）</li><li>数据结构（对数据结构的理解、应用，能否根据问题进行数据结构变换以解决复杂问题）</li><li>算法掌握（对于算法题本身，重点考察对于题目的解决思路，以及候选人对问题的理解和判断）</li><li>系统知识（系统的整体认识及核心问题理解：如linux内存分配方法，CPU调度，tcp/ip实现等）</li></ul><h3 id="第2轮-综合素质"><a href="#第2轮-综合素质" class="headerlink" title="第2轮  综合素质"></a>第2轮  综合素质</h3><p><strong>技术广度 &amp; 深度</strong></p><ul><li>考察候选人在广度或深度上的认识和表现。</li><li>判定在项目上实际做到的广度或深度，客观反应其技术能力。</li><li>关注工作经验与职位的match程度，判断在这个职位上可能做到的程度。</li></ul><p><strong>主动性</strong></p><ul><li>工作积极主动，善于获得资源来解决问题。</li><li>示例：<ol><li>举一个在工作中主动提建设性建议的例子；</li><li>在资源有限的情况下,你是如何解决问题的?</li></ol></li></ul><p><strong>项目经验</strong></p><ul><li>项目本身的复杂程度，和岗位的相关性，面试者在项目里面的职责，是否负责架构设计，核心程序编写等。</li><li>示例：<ol><li>是否参加过大型项目，在项目中承担的职责；</li><li>这些项目与我公司项目的相关性</li></ol></li></ul><p><strong>逻辑思维</strong></p><ul><li>包括个人对于问题的分析、归纳、推理和判断</li><li>思路清晰，对事件描述符合逻辑、严密、有条理；工作经验是否系统性全面</li><li>示例：<ol><li>请讲一下您以往的工作/学习经历; <ol start="2"><li>描述一下某个项目中您的职责。</li></ol></li></ol></li></ul><p><strong>理解能力 &amp; 学习能力</strong></p><ul><li>积极地获取与工作有关的信息和知识，并对其进行加工和理解，以不断更新知识结构、提高能力</li><li>示例: <ol><li>你最近一次更新你的知识结构是什么时候,什么原因促使你做这样的更新,你是如何获得相应的知识的? </li><li>通过提问一些不熟悉的问题,逐步引导,观察反应</li></ol></li></ul><p><strong>沟通协作 &amp; 团队合作</strong></p><ul><li>能够有效倾听，清晰地表达自己的观点；愿意帮助或协助他人做事、喜欢集体活动，与周围人和谐相处</li><li>示例：<ol><li>我想知道你曾经遇到过的最有挑战的沟通方面的问题。你为什么认为那次经历对你最富有挑战性，你是如何应对的？<ol start="2"><li>请举一个你在团队中工作时所遇到的困难. 你是怎样解决这个困难的？举例说明你和团队的同事有不同意见的时候是如何处理的？</li></ol></li></ol></li></ul><h2 id="提问方法（深层探究，漏斗技巧）"><a href="#提问方法（深层探究，漏斗技巧）" class="headerlink" title="提问方法（深层探究，漏斗技巧）"></a>提问方法（深层探究，漏斗技巧）</h2><ul><li>你当时想达到什么目的？</li><li>你做的第一件事是什么，为什么？</li><li>你究竟如何做的？</li><li>还有谁参与？</li><li>你的角色/作用是什么？</li><li>你当时怎么想的（按思路顺序）？</li><li>你的感觉是什么？</li><li>在这期间还有什么重要的事情发生吗？</li><li>最后结果如何？</li><li>你是怎么知道这个结果的？</li><li>还有什么要补充的吗？</li><li>告诉我……</li><li>举出实例……</li><li>为何……</li><li>如何……</li><li>你是否……</li></ul><h2 id="硬性素质提问技巧-STAR法则"><a href="#硬性素质提问技巧-STAR法则" class="headerlink" title="硬性素质提问技巧 - STAR法则"></a>硬性素质提问技巧 - STAR法则</h2><p><strong>Situation情景</strong></p><ul><li>描述一个具体情景中，自己所处位置及其他背景信息</li><li>设计问题：项目需求产生的背景，在项目中扮演的角色</li></ul><p><strong>Task任务</strong></p><ul><li>基于前面交代的情景，如何明确自己的目标和任务</li><li>设计问题：目标是什么？如何设定目标的？如何拆解目标？</li></ul><p><strong>Action</strong></p><ul><li>基于前面的目标，有什么行动，具体方案，为什么，如何做</li><li>设计问题：基于目标的拆解，是如何行动的，过程遇到什么问题，挑战</li></ul><p><strong>Result</strong></p><ul><li>行动带来的结果，成效与挑战；目标完成结果；对结果的反思，个人总结；</li><li>设计问题：基于行动，收到了什么成就，是否完成目标；有何经验供以后借鉴</li></ul><h2 id="如何从面试表现预测工作表现"><a href="#如何从面试表现预测工作表现" class="headerlink" title="如何从面试表现预测工作表现"></a>如何从面试表现预测工作表现</h2><ul><li>操作维度 （能按操作说明操作，不代表他的知识或能力）</li><li>知识纬度 （“知其然”只是操作技术层面，“志气所以然”才是真正的知识层面）</li><li>经验纬度 （看你对做过事情的反思和总结，对他人的学习和观察交流，是知识的运用和驾驭）</li><li>能力纬度 （一个人的能力，主要从做事情的态度、行为方法看，因为前三者都可以通过时间积累）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面试准备&quot;&gt;&lt;a href=&quot;#面试准备&quot; class=&quot;headerlink&quot; title=&quot;面试准备&quot;&gt;&lt;/a&gt;面试准备&lt;/h2&gt;&lt;h3 id=&quot;1-明确岗位要求，研究简历&quot;&gt;&lt;a href=&quot;#1-明确岗位要求，研究简历&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="interview" scheme="http://jinzhan.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Web性能优化概述</title>
    <link href="http://jinzhan.github.io/04/05/2016/high-performance-browser-networking/"/>
    <id>http://jinzhan.github.io/04/05/2016/high-performance-browser-networking/</id>
    <published>2016-04-05T02:42:59.000Z</published>
    <updated>2018-11-25T16:08:34.373Z</updated>
    
    <content type="html"><![CDATA[<p>“合格的开发者知道怎么做，而优秀的开发者知道为什么那么做。”</p><p>钻研基础知识与紧跟最新动向本身是一对矛盾，很难平衡。可是没有基础，那只能是“墙上芦苇，头重脚轻根底浅”。光知道表面上的那点东西可不行。需要解决难题的时，发生异常状况时，理解基础知识的人会脱颖而出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“合格的开发者知道怎么做，而优秀的开发者知道为什么那么做。”&lt;/p&gt;
&lt;p&gt;钻研基础知识与紧跟最新动向本身是一对矛盾，很难平衡。可是没有基础，那只能是“墙上芦苇，头重脚轻根底浅”。光知道表面上的那点东西可不行。需要解决难题的时，发生异常状况时，理解基础知识的人会脱颖而出。&lt;
      
    
    </summary>
    
    
      <category term="性能优化" scheme="http://jinzhan.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SQL中Group By的常见场景</title>
    <link href="http://jinzhan.github.io/03/17/2016/sql-group-by/"/>
    <id>http://jinzhan.github.io/03/17/2016/sql-group-by/</id>
    <published>2016-03-17T07:16:59.000Z</published>
    <updated>2018-11-25T16:08:34.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>“Group By”从字面意义上理解就是根据“By”指定的规则对数据进行分组，所谓的分组就是将一个“数据集”划分成若干个“小区域”，然后针对若干个“小区域”进行数据处理。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>原始表</strong></p><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">数量</th><th style="text-align:center">摘要</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">5</td><td style="text-align:center">a1</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">3</td><td style="text-align:center">a2</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">15</td><td style="text-align:center">b1</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">30</td><td style="text-align:center">b2</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">15</td><td style="text-align:center">a3</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">20</td><td style="text-align:center">c2</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">25</td><td style="text-align:center">c1</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">3</td><td style="text-align:center">a2</td></tr></tbody></table><h3 id="group-by实例"><a href="#group-by实例" class="headerlink" title="group by实例"></a>group by实例</h3><p><strong>简单group by</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 类别, sum(数量) as 数量之和</span><br><span class="line"><span class="keyword">from</span> A</span><br><span class="line">group by 类别</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">数量之和</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">70</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">30</td></tr></tbody></table><p><strong> Group By 和 Order By </strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 类别, sum(数量) AS 数量之和</span><br><span class="line"><span class="keyword">from</span> A</span><br><span class="line">group by 类别</span><br><span class="line">order by sum(数量) desc</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">数量之和</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">70</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">30</td></tr></tbody></table><p><strong> Group By中Select指定的字段限制 </strong></p><p>在select指定的字段要么就要包含在Group By语句的后面，作为分组的依据；要么就要被包含在聚合函数中。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 下面的sql语句是错误的：</span><br><span class="line">select 类别, sum(数量) as 数量之和, 摘要</span><br><span class="line"><span class="keyword">from</span> A</span><br><span class="line">group by 类别</span><br><span class="line">order by 类别 desc</span><br></pre></td></tr></table></figure><p><strong> 聚合函数 </strong></p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">sum(列名)</td><td style="text-align:left">求和</td></tr><tr><td style="text-align:left">max(列名)</td><td style="text-align:left">最大值</td></tr><tr><td style="text-align:left">min(列名)</td><td style="text-align:left">最小值</td></tr><tr><td style="text-align:left">avg(列名)</td><td style="text-align:left">平均值</td></tr><tr><td style="text-align:left">count(列名)</td><td style="text-align:left">除null外的记录数</td></tr><tr><td style="text-align:left">count(*)</td><td style="text-align:left">统计记录数包含null</td></tr><tr><td style="text-align:left">count(distinct 列名)</td><td style="text-align:left">除null和重复数据后记录数</td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- 求各组平均值</span><br><span class="line">select 类别, avg(数量) AS 平均值 <span class="keyword">from</span> A<span class="built_in"> group </span>by 类别;</span><br><span class="line"></span><br><span class="line">--- 求各组记录数目</span><br><span class="line">select 类别, count(*) AS 记录数 <span class="keyword">from</span> A<span class="built_in"> group </span>by 类别;</span><br><span class="line"></span><br><span class="line">--- 求记录总数</span><br><span class="line">select 类别, sum(数量) AS 数量之和 <span class="keyword">from</span> A<span class="built_in"> group </span>by 类别;</span><br></pre></td></tr></table></figure><p><strong> Having与Where的区别 </strong></p><p>where 子句的作用是在对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，where条件中不能包含聚组函数，使用where条件过滤出特定的行。</p><p>having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having 条件过滤出特定的组，也可以使用多个分组标准进行分组。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--- where条件不能包含聚合函数</span><br><span class="line">select 类别, sum(数量) as 数量之和 <span class="keyword">from</span> A</span><br><span class="line">group by 类别</span><br><span class="line">having sum(数量) &gt; 18</span><br><span class="line"></span><br><span class="line">--- Having和Where的联合使用方法</span><br><span class="line">select 类别, SUM(数量)<span class="keyword">from</span> A</span><br><span class="line">where 数量 &gt; 8</span><br><span class="line">group by 类别</span><br><span class="line">having SUM(数量) &gt; 10</span><br></pre></td></tr></table></figure><p><strong> Case </strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- |:--位置--:|:--分类id--:|:--cms配置id--:|:--点击量--:|:--点击uv--:|:--展现量--:|:--展现uv--:|</span></span><br><span class="line"><span class="keyword">select</span> va.area, va.classId, va.cmsId, va.pv, va.uv, vb.pv, vb.uv</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> hk_urlfields[<span class="string">'area'</span>] <span class="keyword">as</span> area,</span><br><span class="line">    hk_urlfields[<span class="string">'classId'</span>] <span class="keyword">as</span> classId,</span><br><span class="line">    hk_urlfields[<span class="string">'cmsId'</span>] <span class="keyword">as</span> cmsId,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv, </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> baiduid) <span class="keyword">as</span> uv <span class="keyword">from</span> reduced_iknow_wap_lighttpd</span><br><span class="line">     <span class="keyword">where</span> </span><br><span class="line">           dt = <span class="string">'&#123;@date&#125;'</span></span><br><span class="line">           <span class="keyword">and</span> hk_urlfields[<span class="string">'pid'</span>] = <span class="string">'102'</span></span><br><span class="line">           <span class="keyword">and</span> hk_urlfields[<span class="string">'page'</span>] = <span class="string">'question'</span></span><br><span class="line">           <span class="keyword">and</span> hk_urlfields[<span class="string">'action'</span>] = <span class="string">'click'</span></span><br><span class="line">           <span class="keyword">and</span> hk_urlfields[<span class="string">'area'</span>] <span class="keyword">in</span> (<span class="string">'top_banner'</span>, <span class="string">'text_banner'</span>,<span class="string">'middle_promote'</span>,<span class="string">'bom_fix_banner'</span>)</span><br><span class="line">     <span class="keyword">group</span> <span class="keyword">by</span> hk_urlfields[<span class="string">'area'</span>], hk_urlfields[<span class="string">'classId'</span>], hk_urlfields[<span class="string">'cmsId'</span>]</span><br><span class="line">) va <span class="keyword">join</span> (</span><br><span class="line">    <span class="keyword">select</span> ts.area <span class="keyword">as</span> area, ts.classId <span class="keyword">as</span> classId, ts.cmsId <span class="keyword">as</span> cmsId, <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv, <span class="keyword">count</span>(<span class="keyword">distinct</span> ts.bid) <span class="keyword">as</span> uv</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> transform(hk.cmsKey, hk.classId, hk.bid)</span><br><span class="line">            <span class="keyword">using</span> <span class="string">'$&#123;hiveconf:HDFS_PHP&#125; decodeCmsKey.php'</span></span><br><span class="line">             <span class="keyword">as</span> (area <span class="keyword">string</span>, cmsId <span class="keyword">string</span>, classId <span class="keyword">string</span>, bid <span class="keyword">string</span>)</span><br><span class="line">            <span class="keyword">from</span> (</span><br><span class="line">                <span class="keyword">select</span> hk_urlfields[<span class="string">'cmsKey'</span>] <span class="keyword">as</span> cmsKey,</span><br><span class="line">                        hk_urlfields[<span class="string">'classId'</span>] <span class="keyword">as</span> classId,</span><br><span class="line">                        baiduid <span class="keyword">as</span> bid</span><br><span class="line">                <span class="keyword">from</span> reduced_iknow_wap_lighttpd</span><br><span class="line">                <span class="keyword">where</span> </span><br><span class="line">                dt = <span class="string">'&#123;@date&#125;'</span></span><br><span class="line">                <span class="keyword">and</span> hk_urlfields[<span class="string">'pid'</span>] = <span class="string">'102'</span></span><br><span class="line">                <span class="keyword">and</span> hk_urlfields[<span class="string">'page'</span>] = <span class="string">'question'</span></span><br><span class="line">                <span class="keyword">and</span> hk_urlfields[<span class="string">'action'</span>] = <span class="string">'pv'</span>     </span><br><span class="line">                <span class="keyword">and</span> hk_urlfields[<span class="string">'cmsKey'</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">NULL</span></span><br><span class="line">             <span class="comment">---- group by hk_urlfields['cmsKey'], hk_urlfields['classId'], baiduid</span></span><br><span class="line">            ) hk</span><br><span class="line">    ) ts <span class="keyword">group</span> <span class="keyword">by</span> ts.area, ts.classId, ts.cmsId</span><br><span class="line">) vb <span class="keyword">on</span>(va.area = vb.area <span class="keyword">and</span> va.classId = vb.classId <span class="keyword">and</span> va.cmsId = vb.cmsId)</span><br></pre></td></tr></table></figure><p><strong> 参考资料 </strong><br><a href="http://www.cnblogs.com/rainman/archive/2013/05/01/3053703.html" target="_blank" rel="noopener">http://www.cnblogs.com/rainman/archive/2013/05/01/3053703.html</a></p>]]></content>
    
    <summary type="html">
    
      “Group By”从字面意义上理解就是根据“By”指定的规则对数据进行分组，所谓的分组就是将一个“数据集”划分成若干个“小区域”，然后针对若干个“小区域”进行数据处理。
    
    </summary>
    
    
      <category term="mysql" scheme="http://jinzhan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP的一些优秀开源库</title>
    <link href="http://jinzhan.github.io/02/18/2016/php-lib-collection/"/>
    <id>http://jinzhan.github.io/02/18/2016/php-lib-collection/</id>
    <published>2016-02-18T03:18:30.000Z</published>
    <updated>2018-11-25T16:08:34.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Dispatch-–-微框架"><a href="#1-Dispatch-–-微框架" class="headerlink" title="1.Dispatch – 微框架"></a>1.Dispatch – 微框架</h2><p><a href="https://github.com/badphp/dispatch" target="_blank" rel="noopener">Dispatch</a>是一个PHP小框架。它并没有给你完整的MVC设置，但你可以定义URL规则和方法，以便更好组织应用程序。这对API、简单的站点或原型来说是完美的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含库</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'dispatch.php'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义你的路由</span></span><br><span class="line">get(<span class="string">'/greet'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">　　</span><br><span class="line"><span class="comment">//渲染视图</span></span><br><span class="line">    render(<span class="string">'greet-form'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//post处理</span></span><br><span class="line">post(<span class="string">'/greet'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    $name = from($_POST, <span class="string">'name'</span>);</span><br><span class="line">　　</span><br><span class="line"><span class="comment">// render a view while passing some locals</span></span><br><span class="line">    render(<span class="string">'greet-show'</span>, <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; $name));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// serve your site</span></span><br><span class="line">dispatch();</span><br></pre></td></tr></table></figure><p>你可以匹配特定类型的HTTP请求和路径，渲染视图或做更多事情。如果你合并Dispatch和其他框架，那你就可以拥有一个相当强大并且轻量级的程序！</p><h2 id="2-Klein-–-PHP快如闪电的路由"><a href="#2-Klein-–-PHP快如闪电的路由" class="headerlink" title="2. Klein – PHP快如闪电的路由"></a>2. Klein – PHP快如闪电的路由</h2><p><a href="https://github.com/chriso/klein.php" target="_blank" rel="noopener">Klein</a>是另一款针对PHP5.3+版本的轻量级路由库。虽然它有一些比Dispatch冗长的语法，但它相当快。这有一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">respond(<span class="string">'/[:name]'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Hello '</span> . $request-&gt;name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你也可以定制来指定HTTP方法和使用正则表达式作为路径。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">respond(<span class="string">'GET'</span>, <span class="string">'/posts'</span>, $callback);</span><br><span class="line">respond(<span class="string">'POST'</span>, <span class="string">'/posts/create'</span>, $callback);</span><br><span class="line">respond(<span class="string">'PUT'</span>, <span class="string">'/posts/[i:id]'</span>, $callback);</span><br><span class="line">respond(<span class="string">'DELETE'</span>, <span class="string">'/posts/[i:id]'</span>, $callback);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//匹配多种请求方法:</span></span><br><span class="line">respond(<span class="keyword">array</span>(<span class="string">'POST'</span>,<span class="string">'GET'</span>), $route, $callback);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//你或许也想在相同的地方处理请求</span></span><br><span class="line">respond(<span class="string">'/posts/[create|edit:action] /[i:id] '</span>, <span class="function"><span class="keyword">function</span> <span class="params">($request, $response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> ($request-&gt;action) &#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于小型项目来说这是很棒的，但当你把一个像这样的库用于大型应用时，你不得不遵守规矩，因为你的代码可能很快就变得不可维护。所以你最好搭配一个像<a href="http://www.laravel.com/" target="_blank" rel="noopener">Laravel</a>或者<a href="http://www.codeigniter.com/" target="_blank" rel="noopener">CodeIgniter</a>这样完全成熟的框架。</p><h2 id="3-Ham-–-带缓存的路由库"><a href="#3-Ham-–-带缓存的路由库" class="headerlink" title="3. Ham – 带缓存的路由库"></a>3. Ham – 带缓存的路由库</h2><p><a href="https://github.com/radiosilence/Ham" target="_blank" rel="noopener">Ham</a>也是一款轻量级的路由框架，但是它利用缓存甚至获得了更快的速度。它通过把任何I/O相关的东西缓存进XCache/APC。下面是一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'../ham/ham.php'</span>;</span><br><span class="line"> </span><br><span class="line">$app = <span class="keyword">new</span> Ham(<span class="string">'example'</span>);</span><br><span class="line">$app-&gt;config_from_file(<span class="string">'settings.php'</span>);</span><br><span class="line"> </span><br><span class="line">$app-&gt;route(<span class="string">'/pork'</span>, <span class="function"><span class="keyword">function</span><span class="params">($app)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Delicious pork."</span>;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">$hello = <span class="function"><span class="keyword">function</span><span class="params">($app, $name=<span class="string">'world'</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $app-&gt;render(<span class="string">'hello.html'</span>, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'name'</span> =&gt; $name</span><br><span class="line">    ));</span><br><span class="line">&#125;;</span><br><span class="line">$app-&gt;route(<span class="string">'/hello/&lt;string&gt;'</span>, $hello);</span><br><span class="line">$app-&gt;route(<span class="string">'/'</span>, $hello);</span><br><span class="line"> </span><br><span class="line">$app-&gt;run();</span><br></pre></td></tr></table></figure><p>这个库要求你至少安装了XCache和APC其中的一个，这可能意味着，在大多数主机提供商提供的主机上它可能用不了。但是如果你拥有一个安装它们其一的主机，或者你可以操控你的web服务器，你应该尝试这款最快的框架。</p><h2 id="4-Assetic-–-资源管理"><a href="#4-Assetic-–-资源管理" class="headerlink" title="4. Assetic – 资源管理"></a>4. Assetic – 资源管理</h2><p><a href="https://github.com/kriswallsmith/assetic" target="_blank" rel="noopener">Assetic</a>是一个PHP的资源管理框架，用于合并和减小了CSS/JS资源。下面是例子。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Assetic</span>\<span class="title">Asset</span>\<span class="title">AssetCollection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Assetic</span>\<span class="title">Asset</span>\<span class="title">FileAsset</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Assetic</span>\<span class="title">Asset</span>\<span class="title">GlobAsset</span>;</span><br><span class="line"> </span><br><span class="line">$js = <span class="keyword">new</span> AssetCollection(<span class="keyword">array</span>(</span><br><span class="line">    <span class="keyword">new</span> GlobAsset(<span class="string">'/path/to/js/*'</span>),</span><br><span class="line">    <span class="keyword">new</span> FileAsset(<span class="string">'/path/to/another.js'</span>),</span><br><span class="line">));</span><br><span class="line"> </span><br><span class="line"><span class="comment">//当资源被输出时，代码会被合并</span></span><br><span class="line"><span class="keyword">echo</span> $js-&gt;dump();</span><br></pre></td></tr></table></figure><p>以这种方式合并资源是一个好主意，因为它可以加速站点。不仅仅总下载量减小了，也消除了大量不必要的HTTP请求(这是最影响页面加载时间的两件事)</p><h2 id="5-ImageWorkshop-–-带层的图片处理"><a href="#5-ImageWorkshop-–-带层的图片处理" class="headerlink" title="5. ImageWorkshop – 带层的图片处理"></a>5. ImageWorkshop – 带层的图片处理</h2><p><a href="http://phpimageworkshop.com/" target="_blank" rel="noopener">ImageWorkshop</a>是一个让你操控带层图片的开源库。借助它你可以重定义尺寸、裁剪、制作缩略图、打水印或做更多事情。下面是一个例子：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 从norway.jpg图片初始化norway层</span><br><span class="line"><span class="variable">$norwayLayer</span> = ImageWorkshop::initFromPath(<span class="string">'/path/to/images/norway.jpg'</span>); </span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span> 从watermark.png图片初始化watermark层(水印层)</span><br><span class="line"><span class="variable">$watermarkLayer</span> = ImageWorkshop::initFromPath(<span class="string">'/path/to/images/watermark.png'</span>); </span><br><span class="line"> </span><br><span class="line"><span class="variable">$image</span> = <span class="variable">$norwayLayer</span>-&gt;getResult(); </span><br><span class="line"><span class="regexp">//</span> 这是生成的图片!</span><br><span class="line"> </span><br><span class="line">header(<span class="string">'Content-type: image/jpeg'</span>);</span><br><span class="line">imagejpeg(<span class="variable">$image</span>, null, <span class="number">95</span>); </span><br><span class="line"><span class="regexp">//</span> We choose to show a JPG with a quality of <span class="number">95</span>%</span><br><span class="line"><span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><p>ImageWorkshop被开发用于使一些PHP中最通用的处理图片的案例简化，如果你需要一些更强大的东西，你应该看下Imagine library！</p><h2 id="6-Snappy-–-快照-PDF库"><a href="#6-Snappy-–-快照-PDF库" class="headerlink" title="6. Snappy – 快照/PDF库"></a>6. Snappy – 快照/PDF库</h2><p><a href="https://github.com/KnpLabs/snappy" target="_blank" rel="noopener">Snappy</a>是一个PHP5库，可以生成快照、URL、HTML、PDF。它依赖于wkhtmltopdf binary（在Linux，Windows和OSX上都可用）。你可以像这样使用它们：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">'/path/to/snappy/src/autoload.php'</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">Knp</span>\<span class="title">Snappy</span>\<span class="title">Pdf</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//通过wkhtmltopdf binary路径初始化库</span></span><br><span class="line">$snappy = <span class="keyword">new</span> Pdf(<span class="string">'/usr/local/bin/wkhtmltopdf'</span>); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//通过把Content-type头设置为pdf来在浏览器中展示pdf</span></span><br><span class="line"> </span><br><span class="line">header(<span class="string">'Content-Type: application/pdf'</span>);</span><br><span class="line">header(<span class="string">'Content-Disposition: attachment; filename="file.pdf"'</span>); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> $snappy-&gt;getOutput(<span class="string">'http://www.github.com'</span>);</span><br></pre></td></tr></table></figure><p>要记得，你的主机提供商可能不允许调用外部二进制程序。</p><h2 id="7-Idiorm-–-轻量级ORM库"><a href="#7-Idiorm-–-轻量级ORM库" class="headerlink" title="7. Idiorm – 轻量级ORM库"></a>7. Idiorm – 轻量级ORM库</h2><p><a href="https://github.com/j4mie/idiorm/" target="_blank" rel="noopener">Idiorm</a>是个人之前在本网站教程中用过最喜爱的一款。它是一款轻量级的ORM库，一个建立在PDO之上的PHP5查询构造器。借助它，你可以忘记如何书写乏味的SQL：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$user = ORM::for_table(<span class="string">'user'</span>)</span><br><span class="line">    -&gt;where_equal(<span class="string">'username'</span>, <span class="string">'j4mie'</span>)</span><br><span class="line">    -&gt;find_one();</span><br><span class="line"> </span><br><span class="line">$user-&gt;first_name = <span class="string">'Jamie'</span>;</span><br><span class="line">$user-&gt;save();</span><br><span class="line"> </span><br><span class="line">$tweets = ORM::for_table(<span class="string">'tweet'</span>)</span><br><span class="line">    -&gt;select(<span class="string">'tweet.*'</span>)</span><br><span class="line">    -&gt;join(<span class="string">'user'</span>, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'user.id'</span>, <span class="string">'='</span>, <span class="string">'tweet.user_id'</span></span><br><span class="line">    ))</span><br><span class="line">    -&gt;where_equal(<span class="string">'user.username'</span>, <span class="string">'j4mie'</span>)</span><br><span class="line">    -&gt;find_many();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span> ($tweets <span class="keyword">as</span> $tweet) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $tweet-&gt;text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>diorm有一个姊妹库叫Paris，Paris是一个基于Idiorm的Active Record实现。</p><h2 id="8-Underscore-–-PHP的工具腰带"><a href="#8-Underscore-–-PHP的工具腰带" class="headerlink" title="8. Underscore – PHP的工具腰带"></a>8. Underscore – PHP的工具腰带</h2><p><a href="http://brianhaveri.github.com/Underscore.php/" target="_blank" rel="noopener">Underscore</a>是原始Underscore.js的一个接口 – Javascript应用的工具腰带。PHP版本没有让人失望，而且支持了几乎所有原生功能。下面是一些例子：</p><p>__::each(array(1, 2, 3), function($num) { echo $num . ‘,’; });<br>// 1,2,3,</p><p>$multiplier = 2;<br>__::each(array(1, 2, 3), function($num, $index) use ($multiplier) {<br>  echo $index . ‘=’ . ($num * $multiplier) . ‘,’;<br>});<br>// prints: 0=2,1=4,2=6,</p><p>__::reduce(array(1, 2, 3), function($memo, $num) { return $memo + $num; }, 0);<br>// 6</p><p>__::find(array(1, 2, 3, 4), function($num) { return $num % 2 === 0; });<br>// 2</p><p>__::filter(array(1, 2, 3, 4), function($num) { return $num % 2 === 0; });<br>// array(2, 4)<br>这个库也支持链式语法，这使得它更为强大。</p><h2 id="9-Requests-–-简单HTTP请求"><a href="#9-Requests-–-简单HTTP请求" class="headerlink" title="9. Requests – 简单HTTP请求"></a>9. Requests – 简单HTTP请求</h2><p><a href="https://github.com/rmccue/Requests" target="_blank" rel="noopener">Requests</a>是一个简化HTTP请求的库。如果你和我一样，几乎从来都记不住传递给Curl的各种各样的参数，那么它就是为你准备的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$headers = <span class="keyword">array</span>(<span class="string">'Accept'</span> =&gt; <span class="string">'application/json'</span>);</span><br><span class="line">$options = <span class="keyword">array</span>(<span class="string">'auth'</span> =&gt; <span class="keyword">array</span>(<span class="string">'user'</span>, <span class="string">'pass'</span>));</span><br><span class="line">$request = Requests::get(<span class="string">'https://api.github.com/gists'</span>, $headers, $options);</span><br><span class="line"> </span><br><span class="line">var_dump($request-&gt;status_code);</span><br><span class="line"><span class="comment">// int(200)</span></span><br><span class="line"> </span><br><span class="line">var_dump($request-&gt;headers[<span class="string">'content-type'</span>]);</span><br><span class="line"><span class="comment">// string(31) "application/json; charset=utf-8"</span></span><br><span class="line"> </span><br><span class="line">var_dump($request-&gt;body);</span><br><span class="line"><span class="comment">// string(26891) "[…]"</span></span><br></pre></td></tr></table></figure></p><p>借助这个库，你可以发送HEAD、GET、POST、PUT、DELTE和PATCH HTTP请求，你可以通过数组添加文件和参数，并且可以访问所有相应数据。</p><h2 id="10-Buzz-–-简单的HTTP请求库"><a href="#10-Buzz-–-简单的HTTP请求库" class="headerlink" title="10. Buzz – 简单的HTTP请求库"></a>10. Buzz – 简单的HTTP请求库</h2><p><a href="https://github.com/kriswallsmith/Buzz" target="_blank" rel="noopener">Buzz</a>是另一个完成HTTP请求的库。下面是一个例子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$request = <span class="keyword">new</span> Buzz\Message\Request(<span class="string">'HEAD'</span>, <span class="string">'/'</span>, <span class="string">'http://google.com'</span>);</span><br><span class="line">$response = <span class="keyword">new</span> Buzz\Message\Response();</span><br><span class="line"> </span><br><span class="line">$client = <span class="keyword">new</span> Buzz\Client\FileGetContents();</span><br><span class="line">$client-&gt;send($request, $response);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> $request;</span><br><span class="line"><span class="keyword">echo</span> $response;</span><br></pre></td></tr></table></figure></p><p>因为它缺乏文档，所以你不得不阅读源码来获知它支持的所有参数。</p><h2 id="11-Goutte-–-Web抓取库"><a href="#11-Goutte-–-Web抓取库" class="headerlink" title="11. Goutte – Web抓取库"></a>11. Goutte – Web抓取库</h2><p><a href="https://github.com/fabpot/Goutte" target="_blank" rel="noopener">Goutte</a>是一个抓取网站和提取数据的库。它提供了一个优雅的API，这使得从远程页面上选择特定元素变得简单。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">'/path/to/goutte.phar'</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">Goutte</span>\<span class="title">Client</span>; </span><br><span class="line"> </span><br><span class="line">$client = <span class="keyword">new</span> Client();</span><br><span class="line">$crawler = $client-&gt;request(<span class="string">'GET'</span>, <span class="string">'http://www.symfony-project.org/'</span>); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//点击链接</span></span><br><span class="line">$link = $crawler-&gt;selectLink(<span class="string">'Plugins'</span>)-&gt;link();</span><br><span class="line">$crawler = $client-&gt;click($link); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用一个类CSS语法提取数据</span></span><br><span class="line">$t = $crawler-&gt;filter(<span class="string">'#data'</span>)-&gt;text(); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Here is the text: $t"</span>;</span><br></pre></td></tr></table></figure><h2 id="12-Carbon-–-DateTime-库"><a href="#12-Carbon-–-DateTime-库" class="headerlink" title="12. Carbon – DateTime 库"></a>12. Carbon – DateTime 库</h2><p><a href="https://github.com/FriendsOfPHP/Goutte" target="_blank" rel="noopener">Carbon</a> 是 DateTime API 的一个简单扩展。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"Right now is %s"</span>, Carbon::now()-&gt;toDateTimeString());</span><br><span class="line">printf(<span class="string">"Right now in Vancouver is %s"</span>, Carbon::now(<span class="string">'America/Vancouver'</span>));</span><br><span class="line"> </span><br><span class="line">$tomorrow = Carbon::now()-&gt;addDay();</span><br><span class="line">$lastWeek = Carbon::now()-&gt;subWeek();</span><br><span class="line">$nextSummerOlympics = Carbon::createFromDate(<span class="number">2012</span>)-&gt;addYears(<span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">$officialDate = Carbon::now()-&gt;toRFC2822String();</span><br><span class="line"> </span><br><span class="line">$howOldAmI = Carbon::createFromDate(<span class="number">1975</span>, <span class="number">5</span>, <span class="number">21</span>)-&gt;age;</span><br><span class="line"> </span><br><span class="line">$noonTodayLondonTime = Carbon::createFromTime(<span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'Europe/London'</span>);</span><br><span class="line"> </span><br><span class="line">$endOfWorld = Carbon::createFromDate(<span class="number">2012</span>, <span class="number">12</span>, <span class="number">21</span>, <span class="string">'GMT'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//总是以UTC对比</span></span><br><span class="line"><span class="keyword">if</span> (Carbon::now()-&gt;gte($endOfWorld)) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (Carbon::now()-&gt;isWeekend()) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Party!'</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> Carbon::now()-&gt;subMinutes(<span class="number">2</span>)-&gt;diffForHumans(); </span><br><span class="line"><span class="comment">// '2分钟之前'</span></span><br></pre></td></tr></table></figure></p><h2 id="13-Ubench-–-微型基准库"><a href="#13-Ubench-–-微型基准库" class="headerlink" title="13. Ubench – 微型基准库"></a>13. Ubench – 微型基准库</h2><p><a href="https://github.com/devster/ubench" target="_blank" rel="noopener">Ubench</a> 是一个用于评测PHP代码的微型库，可监控（代码）执行时间和内存使用率。下面是范例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Ubench</span>\<span class="title">Ubench</span>;</span><br><span class="line"> </span><br><span class="line">$bench = <span class="keyword">new</span> Ubench;</span><br><span class="line"> </span><br><span class="line">$bench-&gt;start();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//执行一些代码</span></span><br><span class="line"> </span><br><span class="line">$bench-&gt;end();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//获取执行消耗时间和内存</span></span><br><span class="line"><span class="keyword">echo</span> $bench-&gt;getTime(); </span><br><span class="line"><span class="comment">// 156ms or 1.123s</span></span><br><span class="line"><span class="keyword">echo</span> $bench-&gt;getTime(<span class="keyword">true</span>); </span><br><span class="line"><span class="comment">// elapsed microtime in float</span></span><br><span class="line"><span class="keyword">echo</span> $bench-&gt;getTime(<span class="keyword">false</span>, <span class="string">'%d%s'</span>); </span><br><span class="line"><span class="comment">// 156ms or 1s</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> $bench-&gt;getMemoryPeak(); </span><br><span class="line"><span class="comment">// 152B or 90.00Kb or 15.23Mb</span></span><br><span class="line"><span class="keyword">echo</span> $bench-&gt;getMemoryPeak(<span class="keyword">true</span>); </span><br><span class="line"><span class="comment">// memory peak in bytes 内存峰值</span></span><br><span class="line"><span class="keyword">echo</span> $bench-&gt;getMemoryPeak(<span class="keyword">false</span>, <span class="string">'%.3f%s'</span>); </span><br><span class="line"><span class="comment">// 152B or 90.152Kb or 15.234Mb</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//在结束标识处返回内存使用情况</span></span><br><span class="line"><span class="keyword">echo</span> $bench-&gt;getMemoryUsage(); </span><br><span class="line"><span class="comment">// 152B or 90.00Kb or 15.23Mb</span></span><br></pre></td></tr></table></figure></p><p>(仅)在开发时运行这些校验是一个好主意。</p><h2 id="14-Validation-–-输入验证引擎"><a href="#14-Validation-–-输入验证引擎" class="headerlink" title="14. Validation – 输入验证引擎"></a>14. Validation – 输入验证引擎</h2><p><a href="https://github.com/Respect/Validation" target="_blank" rel="noopener">Validation</a> 声称是PHP库里最强大的验证引擎。但是，它能名副其实吗？看下面：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Respect</span>\<span class="title">Validation</span>\<span class="title">Validator</span> <span class="title">as</span> <span class="title">v</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//简单验证</span></span><br><span class="line">$number = <span class="number">123</span>;</span><br><span class="line">v::numeric()-&gt;validate($number); </span><br><span class="line"><span class="comment">//true </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//链式验证</span></span><br><span class="line">$usernameValidator = v::alnum()-&gt;noWhitespace()-&gt;length(<span class="number">1</span>,<span class="number">15</span>);</span><br><span class="line">$usernameValidator-&gt;validate(<span class="string">'alganet'</span>); </span><br><span class="line"><span class="comment">//true </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//验证对象属性</span></span><br><span class="line">$user = <span class="keyword">new</span> stdClass;</span><br><span class="line">$user-&gt;name = <span class="string">'Alexandre'</span>;</span><br><span class="line">$user-&gt;birthdate = <span class="string">'1987-07-01'</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//在一个简单链中验证他的属性</span></span><br><span class="line">$userValidator = v::attribute(<span class="string">'name'</span>, v::string()-&gt;length(<span class="number">1</span>,<span class="number">32</span>))</span><br><span class="line">                  -&gt;attribute(<span class="string">'birthdate'</span>, v::date()-&gt;minimumAge(<span class="number">18</span>)); </span><br><span class="line"> </span><br><span class="line">$userValidator-&gt;validate($user); </span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>你可以通过这个库验证你的表单或其他用户提交的数据。除此之外，它内置了很多校验，抛出异常和定制错误信息。</p><h2 id="15-Filterus-–-过滤库"><a href="#15-Filterus-–-过滤库" class="headerlink" title="15. Filterus – 过滤库"></a>15. Filterus – 过滤库</h2><p><a href="https://github.com/ircmaxell/filterus" target="_blank" rel="noopener">Filterus</a>是另一个过滤库，但它不仅仅可以验证，也可以过滤匹配预设模式的输出。下面是一个例子：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f</span> = Filter::factory(<span class="string">'string,max:5'</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="string">'This is a test string'</span>; </span><br><span class="line"> </span><br><span class="line"><span class="variable">$f</span>-&gt;validate(<span class="variable">$str</span>); </span><br><span class="line">/<span class="regexp">/ false</span></span><br><span class="line"><span class="regexp">$f-&gt;filter($str); </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 'This '</span></span><br></pre></td></tr></table></figure></p><p>Filterus有很多内建模式，支持链式用法，甚至可以用独立的验证规则去验证数组元素。</p><h2 id="16-Faker-–-假数据生成器"><a href="#16-Faker-–-假数据生成器" class="headerlink" title="16. Faker – 假数据生成器"></a>16. Faker – 假数据生成器</h2><p><a href="https://github.com/fzaninotto/Faker" target="_blank" rel="noopener">Faker</a> 是一个为你生成假数据的PHP库。当你需要填充一个测试数据库，或为你的web应用生成测试数据时，它能派上用场。它也非常容易使用：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用Faker 自动加载器</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">'/path/to/Faker/src/autoload.php'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用工厂创建来创建一个Faker\Generator实例</span></span><br><span class="line">$faker = Faker\Factory::create();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//通过访问属性生成假数据</span></span><br><span class="line"><span class="keyword">echo</span> $faker-&gt;name; </span><br><span class="line"><span class="comment">// 'Lucy Cechtelar';</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> $faker-&gt;address;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// "426 Jordy Lodge</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// Cartwrightshire, SC 88120-6700"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> $faker-&gt;text;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Sint velit eveniet. Rerum atque repellat voluptatem quia ...</span></span><br><span class="line">只要你继续访问对象属性，它将继续返回随机生成的数据。</span><br></pre></td></tr></table></figure></p><h2 id="17-Mustache-php-–-优雅模板库"><a href="#17-Mustache-php-–-优雅模板库" class="headerlink" title="17. Mustache.php – 优雅模板库"></a>17. Mustache.php – 优雅模板库</h2><p><a href="https://github.com/bobthecow/mustache.php" target="_blank" rel="noopener">Mustache.php</a>是一款流行的模板语言，实际已经在各种编程语言中得到实现。使用它，你可以在客户端或服务段重用模板。 正如你猜得那样，Mustache.php 是使用PHP实现的。</p><p>$m = new Mustache_Engine;<br>echo $m-&gt;render(‘Hello ‘, array(‘planet’ =&gt; ‘World!’));<br>// “Hello World!”<br>建议看一下官方网站Mustache docs 查看更多高级的例子。</p><h2 id="18-Gaufrette-–-文件系统抽象层"><a href="#18-Gaufrette-–-文件系统抽象层" class="headerlink" title="18. Gaufrette – 文件系统抽象层"></a>18. Gaufrette – 文件系统抽象层</h2><p><a href="https://github.com/KnpLabs/Gaufrette" target="_blank" rel="noopener">Gaufrette</a>是一个PHP5库，提供了一个文件系统的抽象层。它使得以相同方式操控本地文件，FTP服务器，亚马逊 S3或更多操作变为可能。它允许你开发程序时，不用了解未来你将怎么访问你的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Gaufrette</span>\<span class="title">Filesystem</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Gaufrette</span>\<span class="title">Adapter</span>\<span class="title">Ftp</span> <span class="title">as</span> <span class="title">FtpAdapter</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Gaufrette</span>\<span class="title">Adapter</span>\<span class="title">Local</span> <span class="title">as</span> <span class="title">LocalAdapter</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//本地文件:</span></span><br><span class="line">$adapter = <span class="keyword">new</span> LocalAdapter(<span class="string">'/var/media'</span>); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//可选地使用一个FTP适配器</span></span><br><span class="line"><span class="comment">// $ftp = new FtpAdapter($path, $host, $username, $password, $port); </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化文件系统</span></span><br><span class="line">$filesystem = <span class="keyword">new</span> Filesystem($adapter); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用它</span></span><br><span class="line">$content = $filesystem-&gt;read(<span class="string">'myFile'</span>);</span><br><span class="line">$content = <span class="string">'Hello I am the new content'</span>;</span><br><span class="line">$filesystem-&gt;write(<span class="string">'myFile'</span>, $content);</span><br></pre></td></tr></table></figure><p>也有缓存和内存适配器，并且随后将会增加更多适配器。</p><h2 id="19-Omnipay-–-支付处理库"><a href="#19-Omnipay-–-支付处理库" class="headerlink" title="19. Omnipay – 支付处理库"></a>19. Omnipay – 支付处理库</h2><p><a href="https://github.com/adrianmacneil/omnipay" target="_blank" rel="noopener">Omnipay</a>是一个PHP支付处理库。它有一个清晰一致的API，并且支持数十个网关。使用这个库，你仅仅需要学习一个API和处理各种各样的支付处理器。下面是一个例子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Omnipay</span>\<span class="title">CreditCard</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Omnipay</span>\<span class="title">GatewayFactory</span>;</span><br><span class="line"> </span><br><span class="line">$gateway = GatewayFactory::create(<span class="string">'Stripe'</span>);</span><br><span class="line">$gateway-&gt;setApiKey(<span class="string">'abc123'</span>);</span><br><span class="line"> </span><br><span class="line">$formData = [<span class="string">'number'</span> =&gt; <span class="string">'4111111111111111'</span>, <span class="string">'expiryMonth'</span> =&gt; <span class="number">6</span>, <span class="string">'expiryYear'</span> =&gt; <span class="number">2016</span>];</span><br><span class="line">$response = $gateway-&gt;purchase([<span class="string">'amount'</span> =&gt; <span class="number">1000</span>, <span class="string">'card'</span> =&gt; $formData]);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ($response-&gt;isSuccessful()) &#123;</span><br><span class="line">　　</span><br><span class="line"><span class="comment">//支付成功:更新数据库</span></span><br><span class="line">    print_r($response);</span><br><span class="line">&#125; <span class="keyword">elseif</span> ($response-&gt;isRedirect()) &#123;</span><br><span class="line">　　</span><br><span class="line"><span class="comment">//跳转到异地支付网关</span></span><br><span class="line">    $response-&gt;redirect();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　</span><br><span class="line"><span class="comment">//支付失败:向客户显示信息</span></span><br><span class="line">    <span class="keyword">exit</span>($response-&gt;getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用相同一致的API，可以很容易地支持多种支付处理器，或在需要时进行切换。</p><h2 id="20-Upload-–-处理文件上传"><a href="#20-Upload-–-处理文件上传" class="headerlink" title="20. Upload – 处理文件上传"></a>20. Upload – 处理文件上传</h2><p><a href="https://github.com/brandonsavage/Upload" target="_blank" rel="noopener">Upload</a>是一个简化文件上传和验证的库。上传表单时，这个库会校验文件类型和尺寸。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$storage = <span class="keyword">new</span> \Upload\Storage\FileSystem(<span class="string">'/path/to/directory'</span>);</span><br><span class="line">$file = <span class="keyword">new</span> \Upload\File(<span class="string">'foo'</span>, $storage);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//验证文件上传</span></span><br><span class="line">$file-&gt;addValidations(<span class="keyword">array</span>(</span><br><span class="line">　　</span><br><span class="line"><span class="comment">//确保文件类型是"image/png"</span></span><br><span class="line">    <span class="keyword">new</span> \Upload\Validation\Mimetype(<span class="string">'image/png'</span>),</span><br><span class="line"> </span><br><span class="line">　　</span><br><span class="line"><span class="comment">//确保文件不超过5M(使用"B","K","M"或者"G")</span></span><br><span class="line">    <span class="keyword">new</span> \Upload\Validation\Size(<span class="string">'5M'</span>)</span><br><span class="line">));</span><br><span class="line"> </span><br><span class="line"><span class="comment">//试图上传文件</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//成功</span></span><br><span class="line">    $file-&gt;upload();</span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//失败!</span></span><br><span class="line">    $errors = $file-&gt;getErrors();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它将减少不少乏味的代码。</p><h2 id="21-HTMLPurifier-–-HTML-XSS-防护"><a href="#21-HTMLPurifier-–-HTML-XSS-防护" class="headerlink" title="21. HTMLPurifier – HTML XSS 防护"></a>21. HTMLPurifier – HTML XSS 防护</h2><p><a href="http://htmlpurifier.org/" target="_blank" rel="noopener">HTMLPurifier</a>是一个HTML过滤库，通过强大的白名单和聚集分析，保护你代码远离XSS攻击。它也确保输出标记符合标准。 (源码在<a href="https://github.com/ezyang/htmlpurifier" target="_blank" rel="noopener">github</a>上)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">'/path/to/HTMLPurifier.auto.php'</span>;</span><br><span class="line"> </span><br><span class="line">$config = HTMLPurifier_Config::createDefault();</span><br><span class="line">$purifier = <span class="keyword">new</span> HTMLPurifier($config);</span><br><span class="line">$clean_html = $purifier-&gt;purify($dirty_html);</span><br></pre></td></tr></table></figure></p><p>如果你的网站允许用户提交 HTML 代码，不修改就展示代码的话，那这时候就是用这个库的时候了。</p><h2 id="22-ColorJizz-PHP-–-颜色操控库"><a href="#22-ColorJizz-PHP-–-颜色操控库" class="headerlink" title="22. ColorJizz-PHP – 颜色操控库"></a>22. ColorJizz-PHP – 颜色操控库</h2><p><a href="https://github.com/mikeemoo/ColorJizz-PHP" target="_blank" rel="noopener">ColorJizz</a>是一个简单的库，借助它你可以转换不同的颜色格式，并且做简单的颜色运算<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">MischiefCollective</span>\<span class="title">ColorJizz</span>\<span class="title">Formats</span>\<span class="title">Hex</span>;</span><br><span class="line"> </span><br><span class="line">$red_hex = <span class="keyword">new</span> Hex(<span class="number">0xFF0000</span>);</span><br><span class="line">$red_cmyk = $hex-&gt;toCMYK();</span><br><span class="line"><span class="keyword">echo</span> $red_cmyk; </span><br><span class="line"><span class="comment">// 0,1,1,0</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> Hex::fromString(<span class="string">'red'</span>)-&gt;hue(<span class="number">-20</span>)-&gt;greyscale(); </span><br><span class="line"><span class="comment">// 555555</span></span><br></pre></td></tr></table></figure></p><p>它已经支持并且可以操控所有主流颜色格式了</p><h2 id="23-PHP-Geo-–-地理位置定位库"><a href="#23-PHP-Geo-–-地理位置定位库" class="headerlink" title="23. PHP Geo – 地理位置定位库"></a>23. PHP Geo – 地理位置定位库</h2><p><a href="https://github.com/mjaschen/phpgeo" target="_blank" rel="noopener">phpgeo</a>是一个简单的库，用于计算地理坐标之间高精度距离。例如：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Location</span>\<span class="title">Coordinate</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Location</span>\<span class="title">Distance</span>\<span class="title">Vincenty</span>;</span><br><span class="line"> </span><br><span class="line">$coordinate1 = <span class="keyword">new</span> Coordinate(<span class="number">19.820664</span>, <span class="number">-155.468066</span>); </span><br><span class="line"><span class="comment">// Mauna Kea Summit 茂纳凯亚峰</span></span><br><span class="line">$coordinate2 = <span class="keyword">new</span> Coordinate(<span class="number">20.709722</span>, <span class="number">-156.253333</span>); </span><br><span class="line"><span class="comment">// Haleakala Summit</span></span><br><span class="line"> </span><br><span class="line">$calculator = <span class="keyword">new</span> Vincenty();</span><br><span class="line">$distance = $calculator-&gt;getDistance($coordinate1, $coordinate2); </span><br><span class="line"><span class="comment">// returns 128130.850 (meters; ≈128 kilometers)</span></span><br></pre></td></tr></table></figure><p>它将在使用地理位置数据的app里出色工作。你可以试译 HTML5 Location API，雅虎的API（或两者都用，我们在weather web app tutorial中这样做了），来获取坐标。</p><h2 id="24-ShellWrap-–-优美的命令行包装器"><a href="#24-ShellWrap-–-优美的命令行包装器" class="headerlink" title="24. ShellWrap – 优美的命令行包装器"></a>24. ShellWrap – 优美的命令行包装器</h2><p>借助 <a href="https://github.com/MrRio/shellwrap" target="_blank" rel="noopener">ShellWrap</a> 库，你可以在PHP代码里使用强大的 Linux/Unix 命令行工具。</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'ShellWrap.php'</span>;</span><br><span class="line"><span class="keyword">use</span> \<span class="title">MrRio</span>\<span class="title">ShellWrap</span> <span class="title">as</span> <span class="title">sh</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//列出当前文件下的所有文件</span></span><br><span class="line"><span class="keyword">echo</span> sh::ls(); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//检出一个git分支</span></span><br><span class="line">sh::git(<span class="string">'checkout'</span>, <span class="string">'master'</span>); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//你也可以通过管道把一个命令的输出用户另一个命令</span></span><br><span class="line"><span class="comment">//下面通过curl跟踪位置，然后通过grep过滤’html’管道来下载example.com网站</span></span><br><span class="line"><span class="keyword">echo</span> sh::grep(<span class="string">'html'</span>, sh::curl(<span class="string">'http://example.com'</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'location'</span> =&gt; <span class="keyword">true</span></span><br><span class="line">))); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//新建一个文件</span></span><br><span class="line">sh::touch(<span class="string">'file.html'</span>); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//移除文件</span></span><br><span class="line">sh::rm(<span class="string">'file.html'</span>); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//再次移除文件(这次失败了,然后因为文件不存在而抛出异常)</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    sh::rm(<span class="string">'file.html'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Caught failing sh::rm() call'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当命令行里发生异常时，这个库抛出异常，所以你可以及时对之做出反应。它也可以通过管道让你一个命令的输出作为另一个命令的输入，来实现更强的灵活性。</p><p><a href="http://1ke.co/course/483" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      PHP的一些优秀开源库，来自Github
    
    </summary>
    
    
      <category term="PHP" scheme="http://jinzhan.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP数据模型相关操作</title>
    <link href="http://jinzhan.github.io/02/18/2016/think-php-data-handle/"/>
    <id>http://jinzhan.github.io/02/18/2016/think-php-data-handle/</id>
    <published>2016-02-18T03:18:30.000Z</published>
    <updated>2018-11-25T16:08:34.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><ul><li>初始目录结构</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www  WEB部署目录（或者子目录）</span><br><span class="line">├─index<span class="selector-class">.php</span>       入口文件</span><br><span class="line">├─README<span class="selector-class">.md</span>       README文件</span><br><span class="line">├─Application     应用目录，默认为空。第一次访问入口文件会自动生成，参考后面的入口文件部分。</span><br><span class="line">├─Public          资源文件目录</span><br><span class="line">└─ThinkPHP        框架目录</span><br></pre></td></tr></table></figure><ul><li>框架目录ThinkPHP</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├─ThinkPHP 框架系统目录（可以部署在非web目录下面）</span><br><span class="line">│  ├─Common       核心公共函数目录</span><br><span class="line">│  ├─Conf         核心配置目录 </span><br><span class="line">│  ├─Lang         核心语言包目录</span><br><span class="line">│  ├─Library      框架类库目录</span><br><span class="line">│  │  ├─Think     核心Think类库包目录</span><br><span class="line">│  │  ├─Behavior  行为类库目录</span><br><span class="line">│  │  ├─Org       Org类库包目录</span><br><span class="line">│  │  ├─Vendor    第三方类库目录</span><br><span class="line">│  │  ├─ ...      更多类库目录</span><br><span class="line">│  ├─Mode         框架应用模式目录</span><br><span class="line">│  ├─Tpl          系统模板目录</span><br><span class="line">│  ├─LICENSE<span class="selector-class">.txt</span>  框架授权协议文件</span><br><span class="line">│  ├─logo<span class="selector-class">.png</span>     框架LOGO文件</span><br><span class="line">│  ├─README<span class="selector-class">.txt</span>   框架README文件</span><br><span class="line">│  └─ThinkPHP<span class="selector-class">.php</span>    框架入口文件</span><br></pre></td></tr></table></figure><p>上述应用的目录结构只是默认设置，事实上，在实际部署应用的时候，建议除了应用入口文件和Public资源目录外，其他文件都放到非WEB目录下面，具有更好的安全性。</p><h1 id="添加记录"><a href="#添加记录" class="headerlink" title="添加记录"></a>添加记录</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$data</span>[<span class="string">'username'</span>] = <span class="string">'ThinkPHP'</span>;</span><br><span class="line"><span class="variable">$data</span>[<span class="string">'email'</span>] = <span class="string">'ThinkPHP@gmail.com'</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;create(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;add();</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><p>add()返回的是插入数据的id,对于不存在的表字段，add()方法会自动过滤。</p><h1 id="读取记录"><a href="#读取记录" class="headerlink" title="读取记录"></a>读取记录</h1><p>在ThinkPHP中读取数据的方式很多，通常分为读取数据、读取数据集和读取字段值</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;where(<span class="string">'username="ThinkPHP"'</span>)-&gt;find();</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><h1 id="读取字段值"><a href="#读取字段值" class="headerlink" title="读取字段值"></a>读取字段值</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;where(<span class="string">'id=3'</span>)-&gt;getField(<span class="string">'username'</span>);</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><p>默认情况下，当只有一个字段的时候，返回满足条件的数据表中的该字段的第一行的值.如果getField()传入多个字段，返回值将是一个关联数组：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;getField(<span class="string">'username,email'</span>);</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure></p><p>这个数组总是以传入的第一个第一个字段为键值的。如果修改为：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;getField(<span class="string">'email,username'</span>);</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure></p><p>将上面的两次代码分别放到testDemo()，你就会看到不一样的结果集。</p><h1 id="用save-方法更新数据"><a href="#用save-方法更新数据" class="headerlink" title="用save()方法更新数据"></a>用save()方法更新数据</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$data</span>[<span class="string">'username'</span>] = <span class="string">'ThinkPHPSave'</span>;</span><br><span class="line"><span class="variable">$data</span>[<span class="string">'email'</span>] = <span class="string">'ThinkPHPSave@outlook.com'</span>;</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;where(<span class="string">'id=3'</span>)-&gt;save(<span class="variable">$data</span>);</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><p>这里的$record返回1，表示成功更改。</p><p>当然，你也可以这样：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;username = <span class="string">'ThinkPHP'</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;email = <span class="string">'ThinkPHP@outlook.com'</span>;</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;where(<span class="string">'id=3'</span>)-&gt;save();</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><p>日常开发的时候经常会遇到一些只更新某些字段的情况，可以通过下面的方式来实现：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">"User"</span>); </span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;where(<span class="string">'id=4'</span>)-&gt;setField(<span class="string">'username'</span>,<span class="string">'ThinkPHPChangeName'</span>);</span><br><span class="line"></span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><p>同时更新多个字段，可以将数据以数组的形式传给setField()方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$user = M(<span class="string">'User'</span>);</span><br><span class="line">$data = <span class="keyword">array</span>(<span class="string">'username'</span>=&gt;<span class="string">'ThinkPHPChangeArray'</span>,<span class="string">'email'</span>=&gt;<span class="string">'ThinkPHP@array.com'</span>);</span><br><span class="line">$record = $user-&gt; where(<span class="string">'id=6'</span>)-&gt;setField($data);</span><br><span class="line">dump($record);</span><br></pre></td></tr></table></figure><h1 id="ThinkPHP删除数据使用delete-方法"><a href="#ThinkPHP删除数据使用delete-方法" class="headerlink" title="ThinkPHP删除数据使用delete()方法"></a>ThinkPHP删除数据使用delete()方法</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;where(<span class="string">'id=3'</span>)-&gt;delete();</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><p>或者你可以直接使用：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$record = $user-&gt;<span class="keyword">delete</span>(<span class="string">'1,2,5'</span>);</span><br><span class="line"><span class="keyword">dump</span>($record);</span><br></pre></td></tr></table></figure></p><p>这样就达到了删除主键1,2,5这三条记录了。</p><h1 id="ActiveRecords"><a href="#ActiveRecords" class="headerlink" title="ActiveRecords"></a>ActiveRecords</h1><p>ThinkPHP实现了ActiveRecords模式的ORM模型，采用了非标准的ORM模型：表映射到类，记录映射到对象。以下实例将使用ActiveRecords重现对数据表的CURD，看看ActiveRecords给我们带来了什么好处。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">"User"</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;username = <span class="string">'ThinkPHPWithActive'</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;email = <span class="string">'ThinkPHPActive@gmail.com'</span>;</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;add();</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure></p><h1 id="读取记录-1"><a href="#读取记录-1" class="headerlink" title="读取记录"></a>读取记录</h1><p>AR最大的特点可能就是它的查询模式了，模式简单易用，因为更多情况下面查询条件都是以主键或者某个关键的字段。这种类型的查询，ThinkPHP有着很好的支持。</p><p>比如说获取主键为2的用户信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">"User"</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;<span class="builtin-name">find</span>(2);</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><p>直接不用where()查询了，简单友好吧。再比如：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$user</span> = M(<span class="string">"User"</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;getByUsername(<span class="string">"jelly"</span>);</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><p>如果是查询多条记录，使用以下方式：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$user = M(<span class="string">"User"</span>);</span><br><span class="line">$record = $user-&gt;<span class="keyword">select</span>(<span class="string">'1,3,8'</span>);</span><br><span class="line"><span class="keyword">dump</span>($record);</span><br></pre></td></tr></table></figure></p><h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = M(<span class="string">"User"</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;find(<span class="number">21</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;username = <span class="string">'TOPThinkChangeWithAR'</span>;</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;save();</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><h1 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h1><ul><li>删除单条记录</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$user = M(<span class="string">"User"</span>);</span><br><span class="line">$record = $user-&gt;<span class="keyword">delete</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">dump</span>($record);</span><br></pre></td></tr></table></figure><ul><li>删除多条记录<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$user = M(<span class="string">"User"</span>);</span><br><span class="line">$record = $user-&gt;<span class="keyword">delete</span>(<span class="string">'15,16'</span>);</span><br><span class="line"><span class="keyword">dump</span>($record);</span><br></pre></td></tr></table></figure></li></ul><h1 id="自动完成"><a href="#自动完成" class="headerlink" title="自动完成"></a>自动完成</h1><p>自动完成是ThinkPHP提供用来完成数据自动处理和过滤的方法，当使用create()方法创建数据对象的时候会触发自动完成数机制。 因此，在ThinkPHP鼓励使用create()方法来创建数据对象，因为这是一种更加安全的方式，直接通过add()或者save()方法实现数据写入无法出发自动完成机制。</p><p>自动完成通常用来完成默认字段写入(比如添加时间戳)，安全字段过滤(比如加密密码)以及业务逻辑的自动处理等。可以通过模型类里面通过$_auto属性定义处理规则。下面演示如何自动完成添加时间戳：</p><p>在UserModel中，声明自动完成的定义数组$_auto ：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $_auto = <span class="keyword">array</span> (</span><br><span class="line">        <span class="keyword">array</span>(<span class="symbol">'created_at</span>',<span class="symbol">'date</span>(<span class="string">"Y-m-d H:i:s"</span>, <span class="built_in">time</span>())',<span class="number">3</span>,<span class="symbol">'function</span>'),</span><br><span class="line">        <span class="keyword">array</span>(<span class="symbol">'updated_at</span>',<span class="symbol">'date</span>(<span class="string">"Y-m-d H:i:s"</span>, <span class="built_in">time</span>())',<span class="number">3</span>,<span class="symbol">'function</span>'),</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>还有一种是理由auto()方法动态设置自动完成的机制，可以到官方文档去看看</p><p>设置完成之后，我们在testDemo()方法中创建一条用户数据：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = D(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$data</span>[<span class="string">'username'</span>] = <span class="string">"ThinkPHP"</span>;</span><br><span class="line"><span class="variable">$data</span>[<span class="string">'email'</span>] = <span class="string">"ThinkPHP@gmail.com"</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;create(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;add();</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure><p>测试，如果返回记录的id值，说明用户记录创建成功。要验证数据是否自动完成，你可以直接使用：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = D(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;find(id);</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure></p><h1 id="自动验证"><a href="#自动验证" class="headerlink" title="自动验证"></a>自动验证</h1><p>自动验证是ThinkPHP模型层提供的一种数据验证方法，可以在使用create()创建数据对象的时候自动进行数据验证。</p><p>数据验证可以进行数据类型、业务规则、安全判断等方面的验证操作。</p><p>通常用于表单验证</p><p>数据验证有两种方式：</p><p>静态方式：在模型类里面通过$_validate属性定义验证规则。</p><p>动态方式：使用模型类的validate()方法动态创建自动验证规则。</p><p>无论是什么方式，验证规则的定义是统一的规则，定义格式为：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array(</span><br><span class="line">     array(验证字段<span class="number">1</span>,验证规则,错误提示,[验证条件,附加规则,验证时间]),</span><br><span class="line">     array(验证字段<span class="number">2</span>,验证规则,错误提示,[验证条件,附加规则,验证时间]),</span><br><span class="line">     ......</span><br><span class="line">)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>下面以$_validate静态方式举例如何使用自动验证：</p><p>在UserController中创建register()方法，对，几乎每一个Web应用都需要实现用户注册这一步。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>对，就是这么简单，这个方法只是将相应的视图文件渲染出来。所以接下来我们创建对应的视图文件，也就是：./Application/Home/View/User/register.html</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;extend name=<span class="string">"Index/base"</span> /&gt;</span><br><span class="line">&lt;block name=<span class="string">"main"</span> &gt;</span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"__URL__/registerValidate"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">"exampleInputName"</span>&gt;<span class="type">Name</span>&lt;/label&gt;</span><br><span class="line">        &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> name=<span class="string">"username"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"exampleInputName"</span> placeholder=<span class="string">"Name"</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">"exampleInputEmail"</span>&gt;<span class="type">Email</span>&lt;/label&gt;</span><br><span class="line">        &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"email"</span> name=<span class="string">"email"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"exampleInputEmail"</span> placeholder=<span class="string">"Email"</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"submit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span>&gt;<span class="type">Submit</span>&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure><p>上面就是一些HTML代码和一点模板的知识，对于模板，我们后续会讲到，但不管怎样，现在我们访问<a href="http://localhost:8999/Home/User/register，就可以看到我们的注册表单页面了。" target="_blank" rel="noopener">http://localhost:8999/Home/User/register，就可以看到我们的注册表单页面了。</a></p><p>注意到form表单中，action=”<strong>URL</strong>/registerValidate”，这表示提交到当前的控制器的registerValidate()方法处理，所以我们在UserController中增加registerValidate()方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> registerValidate()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">'username'</span>] = <span class="variable">$_POST</span>[<span class="string">'username'</span>];</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">'email'</span>] = <span class="variable">$_POST</span>[<span class="string">'email'</span>];</span><br><span class="line">        <span class="variable">$user</span> = D(<span class="string">"User"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="variable">$user</span>-&gt;create(<span class="variable">$data</span>) ) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="variable">$user</span>-&gt;getError());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="regexp">//</span>todo: validation passes, add data to database and redirect somewhere</span><br><span class="line">        echo <span class="string">'validation passes'</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的if ( !$user-&gt;create($data) )会触发自动验证并判断验证是否通过验证。你可以尝试在表单里填写不同的数据来进行测试，也可以修改一下验证规则，更多规则可以到官网查看：</p><p><a href="http://document.thinkphp.cn/manual_3_2.html#auto_validate" target="_blank" rel="noopener">http://document.thinkphp.cn/manual_3_2.html#auto_validate</a></p><h1 id="关联模型"><a href="#关联模型" class="headerlink" title="关联模型"></a>关联模型</h1><p>通常我们所说的关联关系包括下面三种：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一对一关联 ：ONE_TO_ONE，包括HAS_ONE 和 <span class="keyword">BELONGS_TO</span></span><br><span class="line"><span class="keyword">一对多关联 </span>：ONE_TO_MANY，包括HAS_MANY 和 <span class="keyword">BELONGS_TO</span></span><br><span class="line"><span class="keyword">多对多关联 </span>：MANY_TO_MANY</span><br></pre></td></tr></table></figure><h1 id="关联定义"><a href="#关联定义" class="headerlink" title="关联定义"></a>关联定义</h1><p>ThinkPHP可以很轻松的完成数据表的关联CURD操作，目前支持的关联关系包括下面四种： HAS_ONE、BELONGS_TO、HAS_MANY和MANY_TO_MANY。 </p><p>一个模型根据业务模型的复杂程度可以同时定义多个关联，不受限制，所有的关联定义都统一在模型类的 $_link 成员变量里面定义，并且可以支持动态定义。要支持关联操作，模型类必须继承Think\Model\RelationModel类，关联定义的格式类似于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>\<span class="title">RelationModel</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">RelationModel</span></span>&#123;</span><br><span class="line">     <span class="keyword">protected</span> $_link = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'关联'</span>  =&gt;  <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'关联属性1'</span> =&gt; <span class="string">'定义'</span>,</span><br><span class="line">            <span class="string">'关联属性N'</span> =&gt; <span class="string">'定义'</span>,</span><br><span class="line">        ),</span><br><span class="line">     );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于关联属性的定义和值，你可以到官方文档仔细查看，我们下面也会给出一些最常用的。</p><p>在我们的讲解例子中，会采用HAS_MANY和BELONGS_TO来演示，对于其他的几个关系模型，可以参考官方文档举一反三。</p><p>首先我们知道数据库里面有两张表，用户表和文章表，并且我们也为其创建了不同的模型(UserModel ArticelModel)。</p><p>现在我们仔细来想想他们之间的对应关系：一个用户可以拥有多篇文章，而每一篇文章都属于某个特定的用户。所以我们可以分别为这两种关系添加关联模型：</p><p>在UserModel中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $_link = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'Article'</span> =&gt; <span class="keyword">self</span>::HAS_MANY</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>在ArticleModel中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $_link = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'User'</span> =&gt; <span class="keyword">self</span>::BELONGS_TO</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>以上者两种都是最简洁的模型关联声明。因为在最开始设计数据库的时候，我们遵守了ThinkPHP的官方的规范：</p><p>外键的默认规则是当前数据对象名称_id，例如：UserModel对应的可能是表think_user，那么think_user表的外键默认为user_id，如果你的外键不是user_id，而是其他自定义的字段如：user_identify，那么就必须在定义关联的时候定义 foreign_key 。如下：</p><p>在UserModel中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $_link = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'mapping_type'</span>  =&gt; <span class="keyword">self</span>::HAS_MANY,</span><br><span class="line">        <span class="string">'class_name'</span>    =&gt; <span class="string">'Article'</span>,</span><br><span class="line">        <span class="string">'foreign_key'</span>   =&gt; <span class="string">'user_identify'</span>,</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>更多自定义的关联模型参数可以到官网查看。</p><p>有了以上的定义之后，我们就可以在检索用户数据的同时将属于他的文章也一起检索出来，使用relation()。</p><p>同样是在testDemo()这个方法中：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = D(<span class="string">'User'</span>);</span><br><span class="line"><span class="variable">$record</span> = <span class="variable">$user</span>-&gt;relation(<span class="keyword">true</span>)-&gt;find(<span class="number">4</span>);</span><br><span class="line">dump(<span class="variable">$record</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ThinkPHP框架添加、读取、更新数据记录
    
    </summary>
    
    
      <category term="PHP" scheme="http://jinzhan.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>关于webpack的资料整理(一)</title>
    <link href="http://jinzhan.github.io/02/17/2016/getting-started-with-webpack/"/>
    <id>http://jinzhan.github.io/02/17/2016/getting-started-with-webpack/</id>
    <published>2016-02-17T03:45:02.000Z</published>
    <updated>2018-11-25T16:08:34.373Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://webpack.github.io/docs/" target="_blank" rel="noopener">Webpack</a>跟百度的<a href="http://fis.baidu.com" target="_blank" rel="noopener">FIS</a>有一些类似之处，出自Facebook的Instagram团队。自15年以来，受到国内不少人的追捧。这里整理一下官网的一些介绍：</p><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>Today’s websites are evolving into web apps:</p><ul><li>More and more JavaScript is in a page.</li><li>You can do more stuff in modern browsers.</li><li>Fewer full page reloads → even more code in a page.</li></ul><p>As a result there is a <strong>lot</strong> of code on the client side!</p><p>A big code base needs to be organized. Module systems offer the option to split your code base into modules.</p><h2 id="Module-system-styles"><a href="#Module-system-styles" class="headerlink" title="Module system styles"></a>Module system styles</h2><p>There are multiple standards for how to define dependencies and export values:</p><ul><li>&lt;script&gt;-tag style (without a module system)</li><li>CommonJs</li><li>AMD and some dialects of it</li><li>ES6 modules</li><li>and more…</li></ul><h3 id="script-tag-style"><a href="#script-tag-style" class="headerlink" title="script-tag style"></a>script-tag style</h3><p>This is the way you would handle a modularized code base if you didn’t use a module system.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"module1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"module2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"libraryA.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"module3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Modules export an interface to the global object, i. e. the <code>window</code> object. Modules can access the interface of dependencies over the global object.</p><h4 id="Common-problems"><a href="#Common-problems" class="headerlink" title="Common problems"></a>Common problems</h4><ul><li>Conflicts in the global object.</li><li>Order of loading is important.</li><li>Developers have to resolve dependencies of modules/libraries.</li><li>In big projects the list can get really long and difficult to manage.</li></ul><h3 id="CommonJs-synchronous-require"><a href="#CommonJs-synchronous-require" class="headerlink" title="CommonJs: synchronous require"></a>CommonJs: synchronous <code>require</code></h3><p>This style uses a synchronous <code>require</code> method to load a dependency and return an exported interface. A module can specify exports by adding properties to the <code>exports</code> object or setting the value of <code>module.exports</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"module"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../file.js"</span>);</span><br><span class="line">exports.doStuff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = someValue;</span><br></pre></td></tr></table></figure><p>It’s used on server-side by <a href="http://nodejs.org" target="_blank" rel="noopener">node.js</a>.</p><h4 id="Pros"><a href="#Pros" class="headerlink" title="Pros"></a>Pros</h4><ul><li>Server-side modules can be reused</li><li>There are already many modules in this style (npm)</li><li>very simple and easy to use.</li></ul><h4 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h4><ul><li>blocking calls do not apply well on networks. Network requests are asynchronous.</li><li>No parallel require of multiple modules</li></ul><h4 id="Implementations"><a href="#Implementations" class="headerlink" title="Implementations"></a>Implementations</h4><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">node.js</a> - server-side</li><li><a href="https://github.com/substack/node-browserify" target="_blank" rel="noopener">browserify</a></li><li><a href="https://github.com/medikoo/modules-webmake" target="_blank" rel="noopener">modules-webmake</a> - compile to one bundle</li><li><a href="https://github.com/substack/wreq" target="_blank" rel="noopener">wreq</a> - client-side</li></ul><h3 id="AMD-asynchronous-require"><a href="#AMD-asynchronous-require" class="headerlink" title="AMD: asynchronous require"></a>AMD: asynchronous require</h3><p><a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener"><code>Asynchronous Module Definition</code></a></p><p>Other module systems (for the browser) had problems with the synchronous <code>require</code> (CommonJs) and introduced an asynchronous version (and a way to define modules and exporting values):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">"module"</span>, <span class="string">"../file"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module, file</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;);</span><br><span class="line">define(<span class="string">"mymodule"</span>, [<span class="string">"dep1"</span>, <span class="string">"dep2"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">d1, d2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> someExportedValue;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Pros-1"><a href="#Pros-1" class="headerlink" title="Pros"></a>Pros</h4><ul><li>Fits to the asynchronous request style in networks.</li><li>Parallel loading of multiple modules.</li></ul><h4 id="Cons-1"><a href="#Cons-1" class="headerlink" title="Cons"></a>Cons</h4><ul><li>Coding overhead. More difficult to read and write.</li><li>Seems to be some kind of workaround.</li></ul><h4 id="Implementations-1"><a href="#Implementations-1" class="headerlink" title="Implementations"></a>Implementations</h4><ul><li><a href="http://requirejs.org/" target="_blank" rel="noopener">require.js</a> - client-side</li><li><a href="https://github.com/cujojs/curl" target="_blank" rel="noopener">curl</a> - client-side</li></ul><p>Read more about <a href="commonjs.html">CommonJs</a> and <a href="amd.html">AMD</a>.</p><h3 id="ES6-modules"><a href="#ES6-modules" class="headerlink" title="ES6 modules"></a>ES6 modules</h3><p>EcmaScript6 adds some language constructs to JavaScript, which form another module system.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"jquery"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">module</span> <span class="string">"localModule"</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="Pros-2"><a href="#Pros-2" class="headerlink" title="Pros"></a>Pros</h4><ul><li>Static analysis is easy</li><li>Future-proof as ES standard</li></ul><h4 id="Cons-2"><a href="#Cons-2" class="headerlink" title="Cons"></a>Cons</h4><ul><li>Native browser support will take time</li><li>Very few modules in this style</li></ul><h3 id="Unbiased-solution"><a href="#Unbiased-solution" class="headerlink" title="Unbiased solution"></a>Unbiased solution</h3><p>Give the developer the choice of the module style. Allow existing code to work. Make it easy to add custom module styles.</p><hr><h2 id="Transferring"><a href="#Transferring" class="headerlink" title="Transferring"></a>Transferring</h2><p>Modules should be executed on the client, so they must be transferred from the server to the browser.</p><p>There are two extremes on how to transfer modules:</p><ul><li>1 request per module</li><li>all modules in one request</li></ul><p>Both are used in the wild, but both are suboptimal:</p><ul><li>1 request per module<ul><li>Pro: only required modules are transferred</li><li>Con: many requests means much overhead</li><li>Con: slow application startup, because of request latency</li></ul></li><li>all modules in one request<ul><li>Pro: less request overhead, less latency</li><li>Con: not (yet) required modules are transferred too</li></ul></li></ul><h2 id="Chunked-transferring"><a href="#Chunked-transferring" class="headerlink" title="Chunked transferring"></a>Chunked transferring</h2><p>A more flexible transferring would be better. A compromise between the extremes is better in most cases.</p><p>While compiling all modules: Split the set of modules into multiple smaller batches (chunks).</p><p>We get multiple smaller requests. Chunks with modules that are not required initially are only requested on demand. The initial request doesn’t contain your complete code base and is smaller.</p><p>The “split points” are up to the developer and optional.</p><p>A big code base is possible!</p><p>Note: The <a href="https://developers.google.com/web-toolkit/doc/latest/DevGuideCodeSplitting" target="_blank" rel="noopener">idea is from Google’s GWT</a>. </p><p>Read more about <a href="code-splitting.html">Code Splitting</a>.</p><h2 id="Why-only-JavaScript"><a href="#Why-only-JavaScript" class="headerlink" title="Why only JavaScript?"></a>Why only JavaScript?</h2><p>Why should a module system only help the developer with JavaScript? There are many other static resources that need to be handled:</p><ul><li>stylesheets</li><li>images</li><li>webfonts</li><li>html for templating</li><li>etc.</li></ul><p>And also:</p><ul><li>coffeescript → javascript</li><li>elm → javascript</li><li>less stylesheets → css stylesheets</li><li>jade templates → javascript which generates html</li><li>i18n files → something</li><li>etc.</li></ul><p>This should be as easy as:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require(<span class="string">"./style.css"</span>)<span class="comment">;</span></span><br><span class="line">require(<span class="string">"./style.less"</span>)<span class="comment">;</span></span><br><span class="line">require(<span class="string">"./template.jade"</span>)<span class="comment">;</span></span><br><span class="line">require(<span class="string">"./image.png"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>Read more about <a href="using-loaders.html">Using loaders</a> and <a href="loaders.html">Loaders</a>.</p><hr><h2 id="Static-analysis"><a href="#Static-analysis" class="headerlink" title="Static analysis"></a>Static analysis</h2><p>When compiling all the modules a static analysis tries to find dependencies.</p><p>Traditionally this could only find simple stuff without expression, but i.e. <code>require(&quot;./template/&quot; + templateName + &quot;.jade&quot;)</code> is a common construct.</p><p>Many libraries are written in different styles. Some of them are very weird…</p><h2 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h2><p>A clever parser would allow most existing code to run. If the developer does something weird it would try to find the most compatible solution.</p><h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>一个最简单的Webpack配置文件webpack.config.js如下所示：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"><span class="symbol">    entry:</span> [</span><br><span class="line">        <span class="string">"./entry.js"</span></span><br><span class="line">    ],</span><br><span class="line"><span class="symbol">    output:</span> &#123;</span><br><span class="line"><span class="symbol">        path:</span> __dirname,</span><br><span class="line"><span class="symbol">        publicPath:</span> <span class="string">"/assets/"</span>,</span><br><span class="line"><span class="symbol">        filename:</span> <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="symbol">    module:</span> &#123;</span><br><span class="line"><span class="symbol">        loaders:</span> [</span><br><span class="line">            &#123; test: /\.css$/, loader: <span class="string">"style!css"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中entry参数定义了打包后的入口文件，数组中的所有文件会按顺序打包。每个文件进行依赖的递归查找，直到所有相关模块都被打包。output参数定义了输出文件的位置，其中常用的参数包括：</p><ul><li><strong>path</strong>: 打包文件存放的绝对路径</li><li><strong>publicPath</strong>: 网站运行时的访问路径</li><li><strong>filename</strong>: 打包后的文件名</li></ul>]]></content>
    
    <summary type="html">
    
      Webpack跟百度的FIS有一些类似之处，出自Facebook的Instagram团队。自15年以来，受到国内的不少追捧。这里整理一下官网的一些介绍
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用js制作六边形边框</title>
    <link href="http://jinzhan.github.io/02/15/2016/make-a-hexagon/"/>
    <id>http://jinzhan.github.io/02/15/2016/make-a-hexagon/</id>
    <published>2016-02-15T08:58:02.000Z</published>
    <updated>2018-11-25T16:08:34.374Z</updated>
    
    <content type="html"><![CDATA[<div class="hexagon-container" style="width: 300px;height: 300px;margin: 0 auto;"></div><div style="text-align:center;font-size: 12px;padding: 20px;">最终效果</div><script src="http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"></script><script type="text/javascript" src="http://rawgit.com/jinzhan/31458be6c083ea3cd8f6/raw/098a446e4c7cf44ca0874fd69cb4c342545f4fce/hexagon.js"></script><script type="text/javascript">    $(function(){        new Hexagon('.hexagon-container', {            width: 300,            height: 300,            transitionDuration: 0.5        });    });</script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>灵感来自于这个网站LOGO图案：<a href="http://www.colorhexa.com/" target="_blank" rel="noopener">http://www.colorhexa.com/</a>:<br><img src="http://www.colorhexa.com/static/i/logo.min.svg" alt="colorhexa logo"></p><h2 id="关于clip-path"><a href="#关于clip-path" class="headerlink" title="关于clip-path"></a>关于clip-path</h2><p> 该网站的logo是用svg制作而成，svg的优点是矢量图形可伸缩，这里我想使用js生成一个正六边形，增加一些动画效果，让它更加生动。生成不规则的图形一定要用svg和cavnas吗？其实通过css3提供的clip-path，就能胜任这个效果，基本思路：</p><ol><li>这个正六边形的边，恰好是由30个等边三角形构成；</li><li>假设三角形的边长为<code>n</code>；则六边形的高度为：<code>n*6</code>，宽度为<code>n*sin60*6</code>；</li><li>整体用百分比，以便自适应宽高；</li></ol><h3 id="clip-path-Syntax"><a href="#clip-path-Syntax" class="headerlink" title="clip-path Syntax"></a>clip-path Syntax</h3> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="attribute">clip-path</span>: none;</span><br><span class="line"><span class="attribute">clip-path</span>: fill-box;</span><br><span class="line"><span class="attribute">clip-path</span>: stroke-box;</span><br><span class="line"><span class="attribute">clip-path</span>: view-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Image values */</span></span><br><span class="line"><span class="attribute">clip-path</span>: url(resources.svg<span class="number">#c1</span>);</span><br><span class="line"><span class="attribute">clip-path</span>: linear-gradient(blue, transparent);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Geometry values */</span></span><br><span class="line"><span class="attribute">clip-path</span>: inset(<span class="number">100px</span> <span class="number">50px</span>);</span><br><span class="line"><span class="attribute">clip-path</span>: circle(<span class="number">50px</span> at <span class="number">0</span> <span class="number">100px</span>);</span><br><span class="line"><span class="attribute">clip-path</span>: polygon(<span class="number">50%</span> <span class="number">0%</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">0%</span> <span class="number">50%</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="attribute">clip-path</span>: inherit;</span><br><span class="line"><span class="attribute">clip-path</span>: initial;</span><br><span class="line"><span class="attribute">clip-path</span>: unset;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><a href="https://gist.github.com/jinzhan/31458be6c083ea3cd8f6" target="_blank" rel="noopener">https://gist.github.com/jinzhan/31458be6c083ea3cd8f6</a></p><h2 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h2><p>在该图案上添加了CSS动画的transition后，在chrome下面表现良好，但是在Safari及移动端失效。经追查，CSS3的transition中的clip-path并不能被safari很好的支持了。这个就只能通过js来实现动画效果了。</p>]]></content>
    
    <summary type="html">
    
      该网站的logo是用svg制作而成，svg的优点是矢量图形可伸缩，这里我使用js生成一个正六边形，增加一些动画效果，让它更加生动。
    
    </summary>
    
    
      <category term="javascript" scheme="http://jinzhan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>gbk编码引起的一个问题</title>
    <link href="http://jinzhan.github.io/01/30/2015/gbk-issue/"/>
    <id>http://jinzhan.github.io/01/30/2015/gbk-issue/</id>
    <published>2016-01-30T02:48:40.000Z</published>
    <updated>2018-11-25T16:08:34.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>最近在一个项目中，由于转义的问题，导致页面出现报错。检查以后，发现是<code>单引号</code>引起的，但是转义其实已经做了如下处理：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-init</span>=<span class="string">'content="</span></span></span><span class="template-tag">&#123;%$<span class="name">data</span>.content|replace:<span class="string">"'"</span>:'\"'|replace:<span class="string">'"'</span>:'\"'%&#125;</span><span class="xml"><span class="tag"><span class="string">"'</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>奇怪的是，内容中的多个<code>单引号</code>，有一个<code>单引号</code>未被替换掉。</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>代码用到的是PHP的smarty模块，这里的replace等同于PHP函数的 str_replace()，即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str_replace(<span class="string">'\'</span><span class="string">', '</span>\\\<span class="string">''</span>, <span class="variable">$data</span>.content);</span><br></pre></td></tr></table></figure><p>这里是没有任何问题，那问题在哪儿呢？事出反常必有妖。那一定是某个特定环境的问题，如是，我想到的是项目中的GBK编码所致。</p><p>首先，gbk编码是采用双字节：</p><h3 id="GBK字符集范围"><a href="#GBK字符集范围" class="headerlink" title="GBK字符集范围"></a>GBK字符集范围</h3><h4 id="GB2312字符集"><a href="#GB2312字符集" class="headerlink" title="GB2312字符集"></a>GB2312字符集</h4><ul><li>作用：国家简体中文字符集，兼容ASCII。</li><li>位数：使用2个字节表示，能表示7445个符号，包括6763个汉字，几乎覆盖所有高频率汉字。</li><li>范围：高字节从A1到F7, 低字节从A1到FE。将高字节和低字节分别加上0XA0即可得到编码。</li></ul><h4 id="GBK字符集"><a href="#GBK字符集" class="headerlink" title="GBK字符集"></a>GBK字符集</h4><ul><li>作用：它是GB2312的扩展，加入对繁体字的支持，兼容GB2312。</li><li>位数：使用2个字节表示，可表示21886个字符。</li><li>范围：高字节从81到FE，低字节从40到FE。</li></ul><table><thead><tr><th>分区</th><th>高位</th><th>低位</th><th>说明</th></tr></thead><tbody><tr><td>GBK/1</td><td>A1~A9</td><td>A1~FE</td><td>GB2312非汉字符号</td></tr><tr><td>GBK/2</td><td>B0~F7</td><td>A1~FE</td><td>GB2312汉字</td></tr><tr><td>GBK/3</td><td>81~A0</td><td>40~FE</td><td>扩充汉字</td></tr><tr><td>GBK/4</td><td>AA~FE</td><td>40~A0</td><td>扩充汉字</td></tr><tr><td>GBK/5</td><td>A8~A9</td><td>40~A0</td><td>扩充非汉字</td></tr></tbody></table><p>PS:1和2对应的GB2312字符集</p><h4 id="ascii编码"><a href="#ascii编码" class="headerlink" title="ascii编码"></a>ascii编码</h4><ul><li>作用：表语英语及西欧语言。</li><li>位数：ASCII是用7位表示的，能表示128个字符；其扩展使用8位表示，表示256个字符。</li><li>范围：ASCII从00到7F，扩展从00到FF</li></ul><p>GB2312的编码范围为2121H-777EH，与ASCII有重叠。</p><h4 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace"></a>str_replace</h4><p>str_replace的原理是按照ascii编码进行查找替换，不是多字节安全的；GBK编码下的一个经典问题，就是字符替换后的乱码问题；一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Content-type:text/html;charset=GBK"</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="string">"叫你姨"</span>;</span><br><span class="line"><span class="variable">$str</span> = iconv(<span class="string">'UTF-8'</span>,<span class="string">'GBK'</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$rs</span>= iconv(<span class="string">'UTF-8'</span>,<span class="string">'GBK'</span>, <span class="string">'心'</span>);</span><br><span class="line"><span class="variable">$str</span> = str_replace(<span class="variable">$rs</span>, <span class="string">''</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span>;</span><br></pre></td></tr></table></figure><p>猜猜会输出什么？</p><h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><ol><li>通过bin2hex($str)转码：</li><li><code>叫你姨</code>的GBK编码为<code>BDD0 C4E3 D2CC</code>，</li><li><code>心</code>的GBK编码为<code>D0C4</code></li><li>经过str_replace的替换，结果就变成了<code>BDE3 D2CC</code></li><li>echo pack(‘N’, hexdec(‘BDE3D2CC’)); </li></ol><p>结果是：姐姨</p><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>回到这个问题，替换前的转码为：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span><span class="keyword">c</span><span class="number">703</span>ed<span class="number">7</span>f<span class="number">7</span>ceaab<span class="number">7</span>f<span class="number">0</span>bdccd<span class="number">2</span>d<span class="number">5</span>caf<span class="number">5</span><span class="keyword">c</span><span class="number">6</span>b<span class="number">7</span>a<span class="number">3</span>acccc<span class="number">6</span>bfa<span class="number">8</span>d<span class="number">3</span>d<span class="number">0</span><span class="keyword">c</span><span class="number">7e5</span>bebbb<span class="number">5</span><span class="keyword">c</span><span class="number">4</span>cff<span class="number">3</span>d<span class="number">5</span>f<span class="number">7</span>d<span class="number">2e2</span>d<span class="number">2e5</span>a<span class="number">3</span>acbeadb<span class="number">9</span>fd<span class="number">266</span><span class="keyword">c</span><span class="number">6471756</span>f<span class="number">3</span>bbfaab<span class="number">9e226726471756</span>f<span class="number">3</span>bb<span class="number">5</span><span class="keyword">c</span><span class="number">4</span><span class="keyword">ccc</span><span class="number">6</span>bfa<span class="number">8</span>d<span class="number">4</span>dab<span class="number">1</span>b<span class="number">3</span>baf<span class="number">3</span>bfc<span class="number">9</span>bfb<span class="number">4</span>b<span class="number">5</span>bd<span class="number">2220</span>cecb<span class="number">22</span>a<span class="number">1</span>a<span class="number">22220</span>b<span class="number">0</span>a<span class="number">122</span>a<span class="number">1</span>a<span class="number">22220</span>bae<span class="number">422</span>a<span class="number">3</span>a<span class="number">8</span>d<span class="number">2</span>f<span class="number">4</span>d<span class="number">2</span>eba<span class="number">3</span>a<span class="number">9</span><span class="keyword">c</span><span class="number">8</span>fdb<span class="number">8</span>f<span class="number">6e8</span>f<span class="number">3</span>cec<span class="number">4</span>d<span class="number">7</span>d<span class="number">6</span>a<span class="number">3</span>acbfaab<span class="number">9e2</span>baf<span class="number">3</span>b<span class="number">5</span><span class="keyword">c</span><span class="number">4</span><span class="keyword">ccc</span><span class="number">6</span>bfa<span class="number">8</span>d<span class="number">2</span>d<span class="number">4</span>b<span class="number">9</span>a<span class="number">9</span>b<span class="number">7</span>eed<span class="number">4</span>dacbc<span class="number">2</span>d<span class="number">4</span>babbf<span class="number">2</span>bcd<span class="number">2</span>d<span class="number">6</span>d<span class="number">0</span>b<span class="number">7</span>f<span class="number">0</span><span class="keyword">ccc</span><span class="number">3</span>ceaad<span class="number">2</span>cba<span class="number">3</span>bbceb<span class="number">4</span>beadbfaab<span class="number">9e2</span>b<span class="number">5</span><span class="keyword">c</span><span class="number">4</span><span class="keyword">ccc</span><span class="number">6</span>bfa<span class="number">8</span>bfc<span class="number">9</span>d<span class="number">7</span>f<span class="number">7</span>ceaad<span class="number">2</span>d<span class="number">5</span>caf<span class="number">5</span><span class="keyword">c</span><span class="number">6</span>b<span class="number">7</span>b<span class="number">0</span>dab<span class="number">9</span>d<span class="number">2</span>d<span class="number">4</span>dabcd<span class="number">2</span>cda<span class="number">5</span>b<span class="number">8</span><span class="keyword">c</span><span class="number">9</span>bebbb<span class="number">4</span>a<span class="number">6</span>a<span class="number">3</span>acc<span class="number">8e7</span>bfcdccfca<span class="number">1</span>a<span class="number">2</span>cae<span class="number">9</span>b<span class="number">7</span>bfa<span class="number">3</span>accac<span class="number">7</span><span class="keyword">c</span><span class="number">7e5</span>bebbc<span class="number">9</span>edd<span class="number">0</span><span class="keyword">c</span><span class="number">4</span>a<span class="number">1</span>a<span class="number">2</span><span class="keyword">c</span><span class="number">6</span>b<span class="number">7</span>ceb<span class="number">6</span>b<span class="number">8</span>dfd<span class="number">1</span><span class="keyword">c</span><span class="number">5</span>b<span class="number">5</span><span class="keyword">c</span><span class="number">4</span>d<span class="number">2</span>d<span class="number">5</span>caf<span class="number">5</span>bcd<span class="number">1</span><span class="keyword">c</span><span class="number">6</span>b<span class="number">7</span>a<span class="number">1</span>a<span class="number">33</span><span class="keyword">c</span><span class="number">6272202</span>f<span class="number">3e4173204275646468697374206172742</span><span class="keyword">c</span><span class="number">205468616e676</span>b<span class="number">612068617320636</span><span class="keyword">c</span><span class="number">65616e20616</span>e<span class="number">6420707572652073796</span>d<span class="number">626</span>f<span class="number">6</span><span class="keyword">c</span><span class="number">697</span>a<span class="number">6174696</span>f<span class="number">6e2</span>e<span class="number">20416674657220226</span>f<span class="number">70656e696</span>e<span class="number">67206</span><span class="keyword">c</span><span class="number">6967687422207468726565205661746963616e207465787420266</span>d<span class="number">646173683</span>b<span class="number">266</span>d<span class="number">646173683</span>b<span class="number">224</span>f<span class="number">6</span>d<span class="number">222</span><span class="keyword">c</span><span class="number">20224168222</span><span class="keyword">c</span><span class="number">2022486</span>f<span class="number">6e672220287472616</span>e<span class="number">736</span><span class="keyword">c</span><span class="number">697465726174696</span>f<span class="number">6e292063616</span>e<span class="number">206265207365656e20696</span>e<span class="number">20746865206261636</span>b<span class="number">67726</span>f<span class="number">756e64206</span>f<span class="number">66207468616e676</span>b<span class="number">612e205468656</span>e<span class="number">207468616e676</span>b<span class="number">612073686</span>f<span class="number">756</span><span class="keyword">c</span><span class="number">6420626520617070726</span>f<span class="number">7072696174656</span><span class="keyword">c</span><span class="number">7920776</span>f<span class="number">727368697070656420696e207468652074656</span>d<span class="number">706</span><span class="keyword">c</span><span class="number">65206</span>f<span class="number">7220612066616</span>d<span class="number">696</span><span class="keyword">c</span><span class="number">792068616</span><span class="keyword">c</span><span class="number">6</span><span class="keyword">c</span><span class="number">20666</span>f<span class="number">7220776</span>f<span class="number">727368697070696e67204275646468612</span>e<span class="number">20576974686</span>f<span class="number">7574206265696e67206</span>f<span class="number">70656e6564206</span><span class="keyword">c</span><span class="number">696768742</span><span class="keyword">c</span><span class="number">207468616e676</span>b<span class="number">612063616e2062652068616</span>e<span class="number">67656420696e206120636</span><span class="keyword">c</span><span class="number">65616e20706</span><span class="keyword">c</span><span class="number">6163652</span><span class="keyword">c</span><span class="number">2073756368206173206</span><span class="keyword">c</span><span class="number">6976696e6720726</span>f<span class="number">6</span>f<span class="number">6</span>d<span class="number">206</span>f<span class="number">722073747564792e205468616</span>e<span class="number">676</span>b<span class="number">612069732074686520617274206</span>f<span class="number">6620656</span><span class="keyword">c</span><span class="number">6567616e742074617374652077686963682063616</span>e<span class="number">20616</span><span class="keyword">c</span><span class="number">736</span>f<span class="number">2068656</span><span class="keyword">c</span><span class="number">7020707572696679206</span>d<span class="number">656e74616</span><span class="keyword">c</span><span class="number">6974792e3</span><span class="keyword">c</span><span class="number">2</span>f<span class="number">703</span>e</span><br></pre></td></tr></table></figure><p>替换后的转码为：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span><span class="keyword">c</span><span class="number">703</span>ed<span class="number">7</span>f<span class="number">7</span>ceaab<span class="number">7</span>f<span class="number">0</span>bdccd<span class="number">2</span>d<span class="number">5</span>caf<span class="number">5</span><span class="keyword">c</span><span class="number">6</span>b<span class="number">7</span>a<span class="number">3</span>acccc<span class="number">6</span>bfa<span class="number">8</span>d<span class="number">3</span>d<span class="number">0</span><span class="keyword">c</span><span class="number">7e5</span>bebbb<span class="number">5</span><span class="keyword">c</span><span class="number">4</span>cff<span class="number">3</span>d<span class="number">5</span>f<span class="number">7</span>d<span class="number">2e2</span>d<span class="number">2e5</span>a<span class="number">3</span>acbeadb<span class="number">9</span>fd<span class="number">266</span><span class="keyword">c</span><span class="number">6471756</span>f<span class="number">3</span>bbfaab<span class="number">9e226726471756</span>f<span class="number">3</span>bb<span class="number">5</span><span class="keyword">c</span><span class="number">4</span><span class="keyword">ccc</span><span class="number">6</span>bfa<span class="number">8</span>d<span class="number">4</span>dab<span class="number">1</span>b<span class="number">3</span>baf<span class="number">3</span>bfc<span class="number">9</span>bfb<span class="number">4</span>b<span class="number">5</span>bd<span class="number">5</span><span class="keyword">c</span><span class="number">2220</span>cecb<span class="number">5</span><span class="keyword">c</span><span class="number">22</span>a<span class="number">1</span>a<span class="number">25</span><span class="keyword">c</span><span class="number">2220</span>b<span class="number">0</span>a<span class="number">15</span><span class="keyword">c</span><span class="number">22</span>a<span class="number">1</span>a<span class="number">25</span><span class="keyword">c</span><span class="number">2220</span>bae<span class="number">422</span>a<span class="number">3</span>a<span class="number">8</span>d<span class="number">2</span>f<span class="number">4</span>d<span class="number">2</span>eba<span class="number">3</span>a<span class="number">9</span><span class="keyword">c</span><span class="number">8</span>fdb<span class="number">8</span>f<span class="number">6e8</span>f<span class="number">3</span>cec<span class="number">4</span>d<span class="number">7</span>d<span class="number">6</span>a<span class="number">3</span>acbfaab<span class="number">9e2</span>baf<span class="number">3</span>b<span class="number">5</span><span class="keyword">c</span><span class="number">4</span><span class="keyword">ccc</span><span class="number">6</span>bfa<span class="number">8</span>d<span class="number">2</span>d<span class="number">4</span>b<span class="number">9</span>a<span class="number">9</span>b<span class="number">7</span>eed<span class="number">4</span>dacbc<span class="number">2</span>d<span class="number">4</span>babbf<span class="number">2</span>bcd<span class="number">2</span>d<span class="number">6</span>d<span class="number">0</span>b<span class="number">7</span>f<span class="number">0</span><span class="keyword">ccc</span><span class="number">3</span>ceaad<span class="number">2</span>cba<span class="number">3</span>bbceb<span class="number">4</span>beadbfaab<span class="number">9e2</span>b<span class="number">5</span><span class="keyword">c</span><span class="number">4</span><span class="keyword">ccc</span><span class="number">6</span>bfa<span class="number">8</span>bfc<span class="number">9</span>d<span class="number">7</span>f<span class="number">7</span>ceaad<span class="number">2</span>d<span class="number">5</span>caf<span class="number">5</span><span class="keyword">c</span><span class="number">6</span>b<span class="number">7</span>b<span class="number">0</span>dab<span class="number">9</span>d<span class="number">2</span>d<span class="number">4</span>dabcd<span class="number">2</span>cda<span class="number">5</span>b<span class="number">8</span><span class="keyword">c</span><span class="number">9</span>bebbb<span class="number">4</span>a<span class="number">6</span>a<span class="number">3</span>acc<span class="number">8e7</span>bfcdccfca<span class="number">1</span>a<span class="number">2</span>cae<span class="number">9</span>b<span class="number">7</span>bfa<span class="number">3</span>accac<span class="number">7</span><span class="keyword">c</span><span class="number">7e5</span>bebbc<span class="number">9</span>edd<span class="number">0</span><span class="keyword">c</span><span class="number">4</span>a<span class="number">1</span>a<span class="number">2</span><span class="keyword">c</span><span class="number">6</span>b<span class="number">7</span>ceb<span class="number">6</span>b<span class="number">8</span>dfd<span class="number">1</span><span class="keyword">c</span><span class="number">5</span>b<span class="number">5</span><span class="keyword">c</span><span class="number">4</span>d<span class="number">2</span>d<span class="number">5</span>caf<span class="number">5</span>bcd<span class="number">1</span><span class="keyword">c</span><span class="number">6</span>b<span class="number">7</span>a<span class="number">1</span>a<span class="number">33</span><span class="keyword">c</span><span class="number">6272202</span>f<span class="number">3e4173204275646468697374206172742</span><span class="keyword">c</span><span class="number">205468616e676</span>b<span class="number">612068617320636</span><span class="keyword">c</span><span class="number">65616e20616</span>e<span class="number">6420707572652073796</span>d<span class="number">626</span>f<span class="number">6</span><span class="keyword">c</span><span class="number">697</span>a<span class="number">6174696</span>f<span class="number">6e2</span>e<span class="number">204166746572205</span><span class="keyword">c</span><span class="number">226</span>f<span class="number">70656e696</span>e<span class="number">67206</span><span class="keyword">c</span><span class="number">696768745</span><span class="keyword">c</span><span class="number">22207468726565205661746963616e207465787420266</span>d<span class="number">646173683</span>b<span class="number">266</span>d<span class="number">646173683</span>b<span class="number">5</span><span class="keyword">c</span><span class="number">224</span>f<span class="number">6</span>d<span class="number">5</span><span class="keyword">c</span><span class="number">222</span><span class="keyword">c</span><span class="number">205</span><span class="keyword">c</span><span class="number">2241685</span><span class="keyword">c</span><span class="number">222</span><span class="keyword">c</span><span class="number">205</span><span class="keyword">c</span><span class="number">22486</span>f<span class="number">6e675</span><span class="keyword">c</span><span class="number">2220287472616e736</span><span class="keyword">c</span><span class="number">697465726174696</span>f<span class="number">6e292063616</span>e<span class="number">206265207365656e20696</span>e<span class="number">20746865206261636</span>b<span class="number">67726</span>f<span class="number">756e64206</span>f<span class="number">66207468616e676</span>b<span class="number">612e205468656</span>e<span class="number">207468616e676</span>b<span class="number">612073686</span>f<span class="number">756</span><span class="keyword">c</span><span class="number">6420626520617070726</span>f<span class="number">7072696174656</span><span class="keyword">c</span><span class="number">7920776</span>f<span class="number">727368697070656420696e207468652074656</span>d<span class="number">706</span><span class="keyword">c</span><span class="number">65206</span>f<span class="number">7220612066616</span>d<span class="number">696</span><span class="keyword">c</span><span class="number">792068616</span><span class="keyword">c</span><span class="number">6</span><span class="keyword">c</span><span class="number">20666</span>f<span class="number">7220776</span>f<span class="number">727368697070696e67204275646468612</span>e<span class="number">20576974686</span>f<span class="number">7574206265696e67206</span>f<span class="number">70656e6564206</span><span class="keyword">c</span><span class="number">696768742</span><span class="keyword">c</span><span class="number">207468616e676</span>b<span class="number">612063616e2062652068616</span>e<span class="number">67656420696e206120636</span><span class="keyword">c</span><span class="number">65616e20706</span><span class="keyword">c</span><span class="number">6163652</span><span class="keyword">c</span><span class="number">2073756368206173206</span><span class="keyword">c</span><span class="number">6976696e6720726</span>f<span class="number">6</span>f<span class="number">6</span>d<span class="number">206</span>f<span class="number">722073747564792e205468616</span>e<span class="number">676</span>b<span class="number">612069732074686520617274206</span>f<span class="number">6620656</span><span class="keyword">c</span><span class="number">6567616e742074617374652077686963682063616</span>e<span class="number">20616</span><span class="keyword">c</span><span class="number">736</span>f<span class="number">2068656</span><span class="keyword">c</span><span class="number">7020707572696679206</span>d<span class="number">656e74616</span><span class="keyword">c</span><span class="number">6974792e3</span><span class="keyword">c</span><span class="number">2</span>f<span class="number">703</span>e</span><br></pre></td></tr></table></figure><p>即将<code>22</code>替换为<code>5c22</code>，替换结果中确实有一处的<code>22</code>未被替换。而这个<code>22</code>就是导致报错的问题了，为啥没有替换，猜想难道是<code>22</code>在str_replace的时候被前后分开了，但并没有…</p><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>在本地环境中，通过对上面的编码，进行翻转，未能复现线上的效果，这是啥原因呢？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-type: text/html; charset=gbk"</span>); </span></span><br><span class="line"><span class="php">$content = file_get_contents(<span class="string">'./content.txt'</span>);</span></span><br><span class="line"><span class="php">$str = pack(<span class="string">"H*"</span>, $content) ;</span></span><br><span class="line"><span class="php">$str = str_replace(<span class="string">'"'</span>,<span class="string">'\"'</span>,$str);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $str;</span></span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>这类的问题解决方案其实也很多，比如：</p><ol><li>将内容转换为UTF-8，进行替换，替换完了，再转成GBK；</li><li>使用双字节可靠的mb_ereg_replace进行替换；</li></ol>]]></content>
    
    <summary type="html">
    
      GBK编码下，某些字符替换函数是不安全的
    
    </summary>
    
    
      <category term="gbk" scheme="http://jinzhan.github.io/tags/gbk/"/>
    
      <category term="php" scheme="http://jinzhan.github.io/tags/php/"/>
    
  </entry>
  
</feed>
